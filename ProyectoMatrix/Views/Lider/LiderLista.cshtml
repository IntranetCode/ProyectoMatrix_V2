@using ProyectoMatrix.Servicios
@model IEnumerable<ProyectoMatrix.Models.WebinarListItemVm>

@using ProyectoMatrix.Models

@{
    ViewData["Title"] = "Webinars";
    Layout = "~/Views/Shared/_LayoutComunicados.cshtml";


    var destacado = ViewBag.Destacado as ProyectoMatrix.Models.WebinarListItemVm;
    var videoDestacado = ViewBag.FeaturedVideo as ProyectoMatrix.Models.FeaturedVideoVm;
}



@*Mandar a llamar al servicio de acceso para ocultar o mostrar los botones correspondientes *@
@inject IServicioAcceso Acceso
@{
    var usuarioId = int.Parse(User.FindFirst("UsuarioID").Value);
    var puedeCrear = await Acceso.TienePermisoAsync(usuarioId, "Crear webinar", "Crear");


}

<link href="~/css/stylesLiderLista.css" rel="stylesheet" />
@if (videoDestacado != null)
{
    <div class="lider-hero-container full-bleed">
        <section class="lider-hero">
            <div class="card border-0 shadow-sm">
                <div id="heroVideoWrap"
                     class="hero-video-wrap"
                     data-video-id="@videoDestacado.VideoIdYoutube">
                    <div id="heroPlayer" class="hero-video-player"></div>
                    <div class="hero-overlay"></div>
                </div>

                <div class="card-body hero-content">
                    @if (!string.IsNullOrWhiteSpace(videoDestacado.Descripcion))
                    {
                        <p class="mb-3 text-light">@videoDestacado.Descripcion</p>
                    }
                    <div>
                    </div>
                </div>
            </div>
        </section>
    </div>
}
else if (destacado != null)
{
    var ahora = DateTime.Now;
    var inicio = destacado.FechaInicio;
    DateTime? fin = destacado.FechaFin;

    bool enCurso = fin.HasValue
        ? (ahora >= inicio && ahora <= fin.Value)
        : (ahora >= inicio && ahora.Date == inicio.Date);

    bool yaPaso = fin.HasValue
        ? (ahora > fin.Value)
        : (ahora.Date > inicio.Date);

    <div class="lider-hero-container full-bleed">
        <section class="lider-hero">
            <div class="card border-0 shadow-sm">
                @if (!string.IsNullOrWhiteSpace(destacado.Imagen))
                {
                    <img class="card-img-top hero-img"
                         src="@destacado.Imagen"
                         alt="Imagen del webinar destacado" />
                    <div class="hero-overlay"></div>
                }

                <div class="card-body hero-content">
                    <h3 class="card-title mb-2">@destacado.Titulo</h3>

                    <p class="mb-1">
                        <b>Inicio:</b> @destacado.FechaInicio.ToString("dd 'de' MMMM 'de' yyyy HH:mm") <br />
                        <b>Fin:</b> @destacado.FechaFin.ToString("dd 'de' MMMM 'de' yyyy HH:mm")
                    </p>


                    @{
                        bool esAsamblea = !string.IsNullOrWhiteSpace(destacado?.UrlEnVivoEmbed);
                    }
                    <div>
                        @if (enCurso)
                        {
                            if (!string.IsNullOrWhiteSpace(destacado.UrlEnVivoEmbed))
                            {
                                <button type="button" class="btn btn-primary"
                                        onclick="abrirEnKiosko('@destacado.UrlEnVivoEmbed')">
                                    Ver en vivo
                                </button>
                            }

                            @if (puedeCrear && !string.IsNullOrWhiteSpace(destacado.UrlTeams))
                            {
                                <button type="button" class="btn btn-outline-light ms-2"
                                        onclick="abrirTeamsTopLevel('@destacado.UrlTeams')">
                                    Unirse por Teams (presentador)
                                </button>
                            }
                        }

                        else if (yaPaso && !string.IsNullOrWhiteSpace(destacado.UrlGrabacion))
                        {
                            <button type="button" class="btn btn-outline-secondary"
                                    onclick="abrirGrabacionKiosko('@destacado.UrlGrabacion')">
                                Volver a ver
                            </button>
                        }
                        else if (!yaPaso && !string.IsNullOrWhiteSpace(destacado.UrlRegistro))
                        {
                            <button type="button" class="btn btn-outline-primary"
                                    onclick="abrirEnKiosko('@destacado.UrlRegistro')">
                                Registrarme
                            </button>
                        }
                        else if (yaPaso)
                        {
                            <span class="badge bg-light text-muted">Evento finalizado</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Próximamente</span>
                        }
                    </div>




                </div>
            </div>
        </section>
    </div>
}



<div class="lider-container webinars-section">
    <div class="section-header">
        <h2 class="section-title">Próximos Webinars</h2>
        <p class="section-subtitle">Conecta con expertos y amplía tu conocimiento</p>
    </div>

    @if (!(Model?.Any() ?? false))
    {
        <div class="empty-state">
            <svg class="empty-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
            <h3>No hay webinars programados</h3>
            <p>Vuelve pronto para ver nuevos eventos</p>
        </div>
    }
    else
    {
        <div class="webinars-grid">
            @foreach (var w in Model)
            {
                var ahora = DateTime.Now;
                var inicio = w.FechaInicio;
                DateTime? fin = w.FechaFin;

                bool enCurso = fin.HasValue
                ? (ahora >= inicio && ahora <= fin.Value)
                : (ahora >= inicio && ahora.Date == inicio.Date);

                bool yaPaso = fin.HasValue
                ? (ahora > fin.Value)
                : (ahora.Date > inicio.Date);

                <article class="webinar-card @(enCurso ? "live" : "") @(yaPaso ? "past" : "")">
                    @if (!string.IsNullOrWhiteSpace(w.Imagen))
                    {
                        <div class="webinar-thumbnail">
                            <img src="@w.Imagen" alt="@w.Titulo" loading="lazy" />
                            <div class="thumbnail-overlay">
                                @if (enCurso)
                                {
                                    <span class="status-badge live-badge">
                                        <span class="pulse-dot"></span>
                                        En Vivo
                                    </span>
                                }
                                else if (yaPaso)
                                {
                                    <span class="status-badge past-badge">Finalizado</span>
                                }
                                else
                                {
                                    <span class="status-badge upcoming-badge">Próximamente</span>
                                }
                            </div>
                        </div>
                    }

                    <div class="webinar-content">
                        <h3 class="webinar-title">@w.Titulo</h3>

                        <div class="webinar-meta">
                            <div class="meta-item">
                                <svg class="meta-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                                <div class="meta-text">
                                    <span class="meta-label">Inicio</span>
                                    <span class="meta-value">@w.FechaInicio.ToString("dd MMM yyyy, HH:mm")</span>
                                </div>
                            </div>
                            <div class="meta-item">
                                <svg class="meta-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <div class="meta-text">
                                    <span class="meta-label">Fin</span>
                                    <span class="meta-value">@w.FechaFin.ToString("dd MMM yyyy, HH:mm")</span>
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrWhiteSpace(w.Descripcion))
                        {
                            <p class="webinar-description">@w.Descripcion</p>
                        }

                        <div class="webinar-actions">
                            @if (enCurso)
                            {
                                if (!string.IsNullOrWhiteSpace(w.UrlEnVivoEmbed))
                                {
                                    <button type="button" class="btn btn-primary btn-live"
                                            onclick="abrirEnKiosko('@w.UrlEnVivoEmbed')">
                                        <svg class="btn-icon" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" />
                                        </svg>
                                        Ver en Vivo
                                    </button>
                                }

                                @if (puedeCrear && !string.IsNullOrWhiteSpace(w.UrlTeams))
                                {
                                    <button type="button" class="btn btn-secondary"
                                            onclick="abrirTeamsTopLevel('@w.UrlTeams')">
                                        <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                        </svg>
                                        Unirse (Presentador)
                                    </button>
                                }
                            }
                            else if (yaPaso && !string.IsNullOrWhiteSpace(w.UrlGrabacion))
                            {
                                <button type="button" class="btn btn-secondary"
                                        onclick="abrirGrabacionKiosko('@w.UrlGrabacion')">
                                    <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    Ver Grabación
                                </button>
                            }
                            else if (!yaPaso && !string.IsNullOrWhiteSpace(w.UrlRegistro))
                            {
                                <button type="button" class="btn btn-primary"
                                        onclick="abrirEnKiosko('@w.UrlRegistro')">
                                    <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                    </svg>
                                    Registrarme Ahora
                                </button>
                            }
                        </div>
                    </div>
                </article>
            }
        </div>
    }
</div>


<div class="videoteca mt-5">
    <link href="~/css/stylesLiderIndex.css" rel="stylesheet" />
    <div class="lider-container">
        <p class="lider-title">
            Videoteca
        </p>
    </div>

    <!-- Categorías de Videos (solo 1 sección, siempre visible) -->
    <div class="categories-section">
        <!-- Liderazgo Estratégico -->
        <div class="category-section" data-category="estrategico">
            <div class="category-header">
                <h2 class="category-title">
                    <i class="fas fa-chess-king"></i>
                    Videos NS Group
                </h2>
            </div>
            <div class="videos-grid" id="estrategico-grid"></div>
        </div>
    </div>

    <!-- Modal de Video -->
    <div class="video-modal" id="videoModal">
        <div class="video-modal-content">
            <button class="video-modal-close" onclick="cerrarModal()">
                <i class="fas fa-times"></i>
            </button>
            <div class="video-player-container">
                <iframe id="videoPlayer" src="" frameborder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowfullscreen></iframe>
            </div>
        </div>
    </div>
</div>


@*Se agrega un kiosko para navegar siempre dentro de intranet*@

<div class="kiosko-wrap mt-4" id="kioskoWrap" style="display:none;">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div class="small text-muted">Navegando dentro de la intranet</div>
        <button type="button" class="btn btn-sm btn-outline-dark" onclick="cerrarKiosko()">Cerrar</button>
    </div>
    <iframe id="kioskoFrame" class="kiosko-frame"
            allow="camera; microphone; fullscreen; autoplay"
            src=""></iframe>

</div>






@section Scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />



    <script>

            const videosData = {
          estrategico: [
            { id: 1, titulo: "NS GROUP LO MEJOR DEL MUNDO PARA TU GRANJA", speaker: "", descripcion: "", duracion: "", nivel: "", videoId: "WRgDEFqrYl0", thumbnail: "" },
            { id: 2, titulo: "Export CAT NS Rotecna",                          speaker: "", descripcion: "", duracion: "", nivel: "", videoId: "hZx4m9MqTPk", thumbnail: "" },
            { id: 3, titulo: "NS Group - Lo Mejor del Mundo para tu Granja",    speaker: "", descripcion: "", duracion: "", nivel: "", videoId: "do63QyncqWM", thumbnail: "" },
            { id: 4, titulo: "Silos NS Group - Conoce sus ventajas",            speaker: "", descripcion: "", duracion: "", nivel: "", videoId: "n42FKBU5fhI", thumbnail: "" },
            { id: 5, titulo: "PUEBLA NS HYPOR",                               speaker: "", descripcion: "", duracion: "", nivel: "", videoId: "_Ig060pL37c", thumbnail: "" }
          ],
        };


        let filtroActual = 'todos';
        let todosLosVideos = [];

        document.addEventListener('DOMContentLoaded', function () {
          Object.values(videosData).forEach(cat => todosLosVideos.push(...cat));
          cargarVideosPorCategoria();

          // Animación de entrada
          setTimeout(() => {
            const categorySections = document.querySelectorAll('.category-section');
            categorySections.forEach((section, index) => {
              section.style.opacity = '0';
              section.style.transform = 'translateY(30px)';
              setTimeout(() => {
                section.style.transition = 'all 0.6s ease';
                section.style.opacity = '1';
                section.style.transform = 'translateY(0)';
              }, index * 200);
            });
          }, 300);
        });

        function cargarVideosPorCategoria() {
          Object.keys(videosData).forEach(categoria => {
            const grid = document.getElementById(categoria + '-grid');
            if (grid) grid.innerHTML = videosData[categoria].map(video => crearVideoCard(video)).join('');
          });
        }

            function getYouTubeThumb(id, quality = 'hqdefault') {
          // opciones: default, mqdefault, hqdefault, sddefault, maxresdefault
          return `https://img.youtube.com/vi/${id}/${quality}.jpg`;
        }

        function resolveThumb(video) {
          // Usa la que traiga el objeto; si viene vacía, usa la de YouTube
          if (video.thumbnail && video.thumbnail.trim() !== '') return video.thumbnail;
          if (video.videoId && video.videoId.trim() !== '') return getYouTubeThumb(video.videoId, 'hqdefault');
          return ''; // último recurso (no debería pasar si hay videoId)
        }

        function crearVideoCard(video) {
          const thumb = resolveThumb(video);
          // Usa <img> para asegurar carga inmediata y accesibilidad
          return `
            <div class="video-card" onclick="reproducirVideo('${video.videoId}', '${video.titulo.replace(/'/g,"\\'")}')">
              <div class="video-thumbnail">
                ${thumb ? `<img src="${thumb}" alt="Miniatura de ${video.titulo}" loading="lazy">` : ''}
                <div class="video-level">${video.nivel ?? ''}</div>
                <div class="video-duration">${video.duracion ?? ''}</div>
                <div class="video-play-overlay">
                  <div class="video-play-btn"><i class="fas fa-play"></i></div>
                </div>
              </div>
              <div class="video-info">
                <h3 class="video-title">${video.titulo}</h3>
                <div class="video-speaker"><i class="fas fa-user-tie"></i> ${video.speaker}</div>
                <p class="video-description">${video.descripcion}</p>
               @* <div class="video-stats">
              <div class="video-rating"><i class="fas fa-star"></i> ${video.rating!= null}</div>
              <div class="video-views"><i class="fas fa-eye"></i> ${Number(video.views!= null).toLocaleString()}</div>
            </div>*@
              </div>
            </div>`;
        }

        function filtrarPor(e, categoria) {
          document.querySelectorAll('.filter-tag').forEach(btn => btn.classList.remove('active'));
          if (e && e.target) e.target.classList.add('active');

          filtroActual = categoria;
          const secciones = document.querySelectorAll('.category-section');
          secciones.forEach(seccion => {
            if (categoria === 'todos') seccion.style.display = 'block';
            else seccion.style.display = seccion.dataset.category === categoria ? 'block' : 'none';
          });

          if (categoria !== 'todos') {
            const seccionVisible = document.querySelector(`[data-category="${categoria}"]`);
            if (seccionVisible) seccionVisible.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }

        function buscarVideos(termino) {
          if (termino.length < 2) { cargarVideosPorCategoria(); return; }
          const t = termino.toLowerCase();
          const videosFiltrados = todosLosVideos.filter(v =>
            v.titulo.toLowerCase().includes(t) ||
            v.speaker.toLowerCase().includes(t) ||
            v.descripcion.toLowerCase().includes(t)
          );

          Object.keys(videosData).forEach(categoria => {
            const grid = document.getElementById(categoria + '-grid');
            if (grid) grid.innerHTML = '';
          });

          const primeraGrid = document.querySelector('.videos-grid');
          if (!primeraGrid) return;
          primeraGrid.innerHTML = videosFiltrados.length
            ? videosFiltrados.map(v => crearVideoCard(v)).join('')
            : `
              <div style="grid-column: 1/-1; text-align: center; padding: 2rem; color: #888;">
                <i class="fas fa-search" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                <h3>No se encontraron videos</h3>
                <p>Intenta con otros términos de búsqueda</p>
              </div>`;
        }

        /*  Modal YouTube simple*/
        function reproducirVideo(videoId, titulo) {
          const modal = document.getElementById('videoModal');
          const player = document.getElementById('videoPlayer');
          if (!modal || !player) return;

          player.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0`;
          modal.classList.add('show');
          document.body.style.overflow = 'hidden';
          console.log(`Reproduciendo: ${titulo}`);
        }

        function cerrarModal() {
          const modal = document.getElementById('videoModal');
          const player = document.getElementById('videoPlayer');
          if (!modal || !player) return;

          player.src = '';
          modal.classList.remove('show');
          document.body.style.overflow = 'auto';
        }

        document.addEventListener('keydown', e => { if (e.key === 'Escape') cerrarModal(); });
        document.getElementById('videoModal')?.addEventListener('click', function (e) {
          if (e.target === this) cerrarModal();
        });

        /*  Animaciones on scroll  */
        const observerOptions = { threshold: 0.1, rootMargin: '0px 0px -50px 0px' };
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.style.opacity = '1';
              entry.target.style.transform = 'translateY(0)';
            }
          });
        }, observerOptions);
        setTimeout(() => {
          document.querySelectorAll('.category-section').forEach(section => {
            section.style.opacity = '0';
            section.style.transform = 'translateY(30px)';
            observer.observe(section);
          });
        }, 500);

        // Carga asíncrona de la API de YouTube
        (function loadYT(){
          if (window.YT && window.YT.Player) return;
          const s = document.createElement('script');
          s.src = "https://www.youtube.com/iframe_api";
          document.head.appendChild(s);
        })();

        let heroPlayer = null;
        let heroObserver = null;

        function onYouTubeIframeAPIReady() {
          const wrap = document.getElementById('heroVideoWrap');
          const target = document.getElementById('heroPlayer');
          if (!wrap || !target) return;

          const videoId = wrap.getAttribute('data-video-id');
          if (!videoId) return;

                 heroPlayer = new YT.Player('heroPlayer', {
            videoId,
            playerVars: {
                autoplay: 0,
                mute: 0,           // ← Cambiado: Sin silencio inicial
                controls: 1,       // ← Ya estaba: Muestra controles
                rel: 0,
                modestbranding: 1,
                playsinline: 1,
                fs: 1              // ← Añadido: Permite pantalla completa
            },
            events: { onReady: setupHeroVisibilityControl }
        });
        }

        function setupHeroVisibilityControl() {
          const host = document.getElementById('heroVideoWrap');
          if (!host) return;

          if ('IntersectionObserver' in window) {
            heroObserver = new IntersectionObserver((entries) => {
              entries.forEach(entry => {
                if (!heroPlayer) return;
                if (entry.isIntersecting && entry.intersectionRatio >= 0.5) {
                  try { heroPlayer.playVideo(); } catch(e){}
                } else {
                  try { heroPlayer.pauseVideo(); } catch(e){}
                }
              });
            }, { threshold: [0, 0.5, 1] });
            heroObserver.observe(host);
          } else {
            try { heroPlayer.playVideo(); } catch(e){}
          }

          document.addEventListener('visibilitychange', () => {
            if (!heroPlayer) return;
            if (document.hidden) {
              try { heroPlayer.pauseVideo(); } catch(e){}
            } else {
              const r = host.getBoundingClientRect();
              const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
              const visible = Math.max(0, Math.min(r.bottom, vh) - Math.max(r.top, 0));
              const ratio = visible / Math.max(1, r.height);
              if (ratio >= 0.5) { try { heroPlayer.playVideo(); } catch(e){} }
            }
          });
        }

        // Pausar héroe si se abre el modal de videoteca
        const _origReproducirVideo = window.reproducirVideo;
        window.reproducirVideo = function(videoId, titulo) {
          try { if (heroPlayer && heroPlayer.pauseVideo) heroPlayer.pauseVideo(); } catch(e){}
          _origReproducirVideo(videoId, titulo);
        };

        // Fallback si la API de YT no responde
        setTimeout(() => {
          const target = document.querySelector('#heroPlayer iframe');
          const wrap = document.getElementById('heroVideoWrap');
          if (!target && wrap) {
            const videoId = wrap.getAttribute('data-video-id');
            if (!videoId) return;
            const iframe = document.createElement('iframe');
        iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=0&mute=0&controls=1&rel=0&modestbranding=1&playsinline=1&fs=1`;            iframe.allow = "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share";
            iframe.allowFullscreen = true;
            document.getElementById('heroPlayer').appendChild(iframe);
          }
        }, 2500);

        /* Helpers de embebido (SharePoint/YouTube/Vimeo)*/
        function esUrlStream(u){
          try{
            const url = new URL(u);
            const host = url.host.toLowerCase();
            const path = url.pathname.toLowerCase();
            const hasEmbedParam = [...url.searchParams.keys()].some(k => k.includes('embed'));
            return host.includes('.sharepoint.com') || host.includes('1drv.ms') ||
                   path.includes('videoembedhost.aspx') || hasEmbedParam;
          } catch { return false; }
        }
        function normalizarStreamEmbed(u){
          try{
            const url = new URL(u);
            if (url.pathname.toLowerCase().includes('videoembedhost.aspx')) return url.toString();
            if (!url.searchParams.has('web'))   url.searchParams.set('web','1');
            if (!url.searchParams.has('embed')) url.searchParams.set('embed','1');
            return url.toString();
          } catch { return u; }
        }
        function esYouTube(u){ return /youtube\.com|youtu\.be/i.test(u); }
        function aEmbedYouTube(u){
          try{
            const y = new URL(u);
            if (y.hostname.includes('youtu.be')) {
              const id = y.pathname.replace('/','');
              return `https://www.youtube.com/embed/${id}?rel=0`;
            }
            if (y.hostname.includes('youtube.com')) {
              const id = y.searchParams.get('v');
              if (id) return `https://www.youtube.com/embed/${id}?rel=0`;
            }
            return u;
          } catch { return u; }
        }
        function esVimeo(u){ return /vimeo\.com/i.test(u); }
        function aEmbedVimeo(u){
          try{
            const v = new URL(u);
            if (v.hostname === 'vimeo.com') {
              const id = v.pathname.split('/').filter(Boolean)[0];
              if (id) return `https://player.vimeo.com/video/${id}`;
            }
            return u;
          } catch { return u; }
        }

        /*   Kiosko (abrir dentro + fallback)   */
        function esTeamsJoin(u){
          try{
            const x = new URL(u);
            return x.host.toLowerCase() === 'teams.microsoft.com'
                   && x.pathname.toLowerCase().startsWith('/l/meetup-join');
          }catch{ return false; }
        }
        function abrirTeamsTopLevel(url){
          window.location.href = url; // Teams join no se puede embeber
        }

         function esTeamsJoin(u){
          try{
            const x = new URL(u);
            return x.host.toLowerCase() === 'teams.microsoft.com'
                   && x.pathname.toLowerCase().startsWith('/l/meetup-join');
          }catch{ return false; }
        }

        function abrirTeamsTopLevel(url){
          window.location.href = url; // Teams join no se puede embeber
        }

                function abrirEnKiosko(url){
          if (esTeamsJoin(url)) { abrirTeamsTopLevel(url); return; } // por si pegaron el join aquí

          const wrap  = document.getElementById('kioskoWrap');
          const frame = document.getElementById('kioskoFrame');
          if (!wrap || !frame) return;

          frame.setAttribute('allow',
            'autoplay; camera; microphone; clipboard-write; encrypted-media; fullscreen; display-capture; screen-wake-lock'
          );

                frame.setAttribute('allowfullscreen', 'true');
        frame.removeAttribute('sandbox');

          let cargado = false;
          const onload = () => { cargado = true; };
          frame.removeEventListener('load', onload);
          frame.addEventListener('load', onload, { once:true });

          frame.src = url;
          wrap.style.display = 'block';
          document.body.classList.add('kiosko-open');

           setTimeout(() => { if (!cargado) window.location.href = url; }, 6000);



        }


        function abrirGrabacionKiosko(url){
          let embed = url;
          // (tus normalizadores de Stream/YouTube/Vimeo pueden quedar donde ya estaban)
          abrirEnKiosko(embed);
        }

        function cerrarKiosko(){
          const wrap  = document.getElementById('kioskoWrap');
          const frame = document.getElementById('kioskoFrame');
          if (frame) frame.src = 'about:blank';
          if (wrap)  wrap.style.display = 'none';
          document.body.classList.remove('kiosko-open');
        }
        function abrirGrabacionKiosko(url){
          console.log('Grabación a abrir:', url); // debug útil
          let embed = url;
          if (esUrlStream(url))        embed = normalizarStreamEmbed(url);
          else if (esYouTube(url))     embed = aEmbedYouTube(url);
          else if (esVimeo(url))       embed = aEmbedVimeo(url);
          abrirEnKiosko(embed);
        }

        function cerrarKiosko(){
          const wrap  = document.getElementById('kioskoWrap');
          const frame = document.getElementById('kioskoFrame');
          if (frame) frame.src = 'about:blank';
          if (wrap)  wrap.style.display = 'none';
          document.body.classList.remove('kiosko-open');
        }


            document.addEventListener('click', function (e) {
          const scope = e.target.closest('.lider-hero, .lider-container'); // limita el alcance
          if (!scope) return;

          const a = e.target.closest('a');
          if (!a) return;

          const href = a.getAttribute('href');
          if (!href || href.startsWith('#') || a.hasAttribute('download')) return;

          e.preventDefault();
          abrirEnKiosko(href);
        });
    </script>




}