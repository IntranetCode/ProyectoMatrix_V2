@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@using ProyectoMatrix.Models.ModelUsuarios
@model UsuarioFormViewModel

@{
    var accion = Model.EsModoCrear ? "Crear" : "Editar";
    var iniciales = "NU";
    if (!Model.EsModoCrear && !string.IsNullOrWhiteSpace(Model.Nombre))
    {
        iniciales = $"{Model.Nombre[0]}".ToUpper();
        if (!string.IsNullOrWhiteSpace(Model.ApellidoPaterno))
        {
            iniciales += $"{Model.ApellidoPaterno[0]}".ToUpper();
        }
    }
    var nombreCompleto = Model.EsModoCrear ? "Nuevo Usuario" : $"{Model.Nombre} {Model.ApellidoPaterno}";
    var overrideGrupos = (ViewBag.OverrideGrupos as List<OverridesVm>) ?? new List<OverridesVm>();
}

<!-- ENCABEZADO DEL PANEL -->
<div class="panel-header-modern">
    <div class="user-profile-section">
        <div class="user-avatar-circle">@iniciales</div>
        <div class="user-info">
            <h2 class="user-name">@nombreCompleto</h2>
            @if (!Model.EsModoCrear)
            {
                <div class="user-meta">
                    <span class="badge @(Model.Activo ? "bg-success" : "bg-secondary")">
                        @(Model.Activo ? "Activo" : "Inactivo")
                    </span>
                    <a href="#" class="reset-password-link">
                        <i class="fas fa-key"></i> Restablecer contraseña
                    </a>
                </div>
            }
        </div>
    </div>
    <button type="button" class="btn-close-modern" id="close-panel-btn" aria-label="Cerrar">
        <i class="fas fa-times"></i>
    </button>
</div>

<!-- PESTAÑAS -->
<ul class="nav nav-tabs nav-tabs-modern" id="userTab" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="cuenta-tab" data-bs-toggle="tab"
                data-bs-target="#tab-cuenta" type="button" role="tab">
            <i class="fas fa-user me-2"></i>Cuenta
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="permisos-tab" data-bs-toggle="tab"
                data-bs-target="#tab-permisos" type="button" role="tab">
            <i class="fas fa-shield-alt me-2"></i>Permisos
        </button>
    </li>
    @if (!Model.EsModoCrear && Model.HistorialDeCambios != null && Model.HistorialDeCambios.Any())
    {
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="auditoria-tab" data-bs-toggle="tab"
                    data-bs-target="#tab-auditoria" type="button" role="tab">
                <i class="fas fa-history me-2"></i>Auditoría
            </button>
        </li>
    }
</ul>

<!-- CONTENIDO DE PESTAÑAS -->
<div class="tab-content tab-content-modern" id="userTabContent">

    <!-- ==================== PESTAÑA: CUENTA ==================== -->
    <div class="tab-pane fade show active" id="tab-cuenta" role="tabpanel">
        <form id="user-form" asp-action="@accion" asp-controller="Usuarios"
              asp-route-id="@Model.UsuarioID" method="post" class="form-modern">

            @Html.AntiForgeryToken()

            <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

            @if (!Model.EsModoCrear)
            {
                <input type="hidden" asp-for="UsuarioID" />
            }

            <!-- Sección: Datos Personales -->
            <div class="form-section">
                <div class="section-header">
                    <i class="fas fa-user-circle section-icon"></i>
                    <h5 class="section-title">Datos Personales</h5>
                </div>

                <div class="row g-3">
                    <div class="col-md-6">
                        <label asp-for="Nombre" class="form-label-modern"></label>
                        <input asp-for="Nombre" class="form-control form-control-modern" placeholder="Ingrese el nombre" />
                        <span asp-validation-for="Nombre" class="text-danger small"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="ApellidoPaterno" class="form-label-modern"></label>
                        <input asp-for="ApellidoPaterno" class="form-control form-control-modern" placeholder="Ingrese el apellido paterno" />
                        <span asp-validation-for="ApellidoPaterno" class="text-danger small"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="ApellidoMaterno" class="form-label-modern"></label>
                        <input asp-for="ApellidoMaterno" class="form-control form-control-modern" placeholder="Ingrese el apellido materno" />
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Telefono" class="form-label-modern"></label>
                        <input asp-for="Telefono" class="form-control form-control-modern" placeholder="+52 000 000 0000" />
                    </div>
                    <div class="col-12">
                        <label asp-for="Correo" class="form-label-modern"></label>
                        <input asp-for="Correo" type="email" class="form-control form-control-modern" placeholder="correo@ejemplo.com" />
                        <span asp-validation-for="Correo" class="text-danger small"></span>
                    </div>
                </div>
            </div>

            <!-- Sección: Credenciales (solo en crear) -->
            @if (Model.EsModoCrear)
            {
                <div class="form-section">
                    <div class="section-header">
                        <i class="fas fa-lock section-icon"></i>
                        <h5 class="section-title">Credenciales de Acceso</h5>
                    </div>

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label asp-for="Username" class="form-label-modern"></label>
                            <input asp-for="Username" class="form-control form-control-modern" placeholder="usuario123" />
                            <span asp-validation-for="Username" class="text-danger small"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="Password" class="form-label-modern"></label>
                            <input asp-for="Password" type="password" class="form-control form-control-modern" placeholder="••••••••" />
                            <span asp-validation-for="Password" class="text-danger small"></span>
                        </div>
                    </div>
                </div>
            }

            <!-- Sección: Configuración de Cuenta -->
            <div class="form-section">
                <div class="section-header">
                    <i class="fas fa-cogs section-icon"></i>
                    <h5 class="section-title">Configuración de Cuenta</h5>
                </div>

                <div class="row g-3">
                    <div class="col-md-6">
                        <label asp-for="RolID" class="form-label-modern"></label>
                        <input asp-for="RolID" type="number" class="form-control form-control-modern" min="1" />
                        <span asp-validation-for="RolID" class="text-danger small"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="EmpresasIDs" class="form-label-modern"></label>
                        <select asp-for="EmpresasIDs" asp-items="@ViewBag.Empresas"
                                class="form-select form-control-modern" multiple size="4">
                        </select>
                        <span asp-validation-for="EmpresasIDs" class="text-danger small"></span>
                        <small class="text-muted d-block mt-1">Mantén Ctrl para seleccionar varias</small>
                    </div>

                    @if (!Model.EsModoCrear)
                    {
                        <div class="col-12">
                            <div class="form-check form-switch form-switch-modern">
                                <input class="form-check-input" type="checkbox" role="switch" asp-for="Activo" id="switchActivo" />
                                <label class="form-check-label" for="switchActivo">
                                    <strong>Usuario Activo</strong>
                                    <small class="d-block text-muted">Desactiva para suspender el acceso</small>
                                </label>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Botones de acción -->
            <div class="form-actions">
                <button type="button" class="btn btn-outline-secondary btn-modern" id="cancel-btn">
                    <i class="fas fa-times me-2"></i>Cancelar
                </button>
                <button type="submit" class="btn btn-primary btn-modern">
                    <i class="fas fa-save me-2"></i>@(Model.EsModoCrear ? "Crear Usuario" : "Guardar Cambios")
                </button>
            </div>
        </form>
    </div>

    

   



@* ====== PERMISOS (COMPLETO, DENTRO DE SU TAB) ====== *@
    <div class="tab-pane fade" id="tab-permisos" role="tabpanel" aria-labelledby="permisos-tab">
        <div class="permissions-container">
            <div class="permissions-header">
                <div>
                    <h5 class="mb-1">Permisos Personalizados</h5>
                    <p class="text-muted small mb-0">
                        Configura permisos específicos para este usuario. Por defecto hereda los del rol.
                    </p>
                </div>
            </div>

            @if (!(ViewBag.OverrideGrupos is List<OverridesVm> grupos) || grupos.Count == 0)
            {
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    No hay información de permisos disponible.
                </div>
            }
            else
            {
                <input type="hidden" id="UsuarioID" value="@Model.UsuarioID" />
                @* IMPORTANTE: necesitas tener @inject IAntiforgery Antiforgery en _ViewImports o en esta vista *@
                <input type="hidden" id="__afToken" value="@Antiforgery.GetAndStoreTokens(Context).RequestToken" />

                @foreach (var grupo in grupos)
                {
                    <div class="permission-group mb-3">
                        <div class="permission-group-header">
                            <i class="fas fa-folder-open me-2"></i>
                            <strong>@grupo.MenuNombre</strong>
                            <span class="badge bg-light text-dark ms-2">@grupo.Items.Count permisos</span>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-permissions align-middle mb-0">
                                <thead>
                                    <tr>
                                        <th style="width: 60px;">ID</th>
                                        <th>Permiso</th>
                                        <th class="text-center" style="width: 300px;">Acciones</th>
                                        <th class="text-center" style="width: 120px;">Estado</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var it in grupo.Items)
                                    {
                                        var badge = it.Estado switch
                                        {
                                            1 => "Override: Permitido",
                                            0 => "Override: Denegado",
                                            _ => null
                                        };
                                        <tr data-submenu="@it.SubMenuID">
                                            <td class="text-muted">@it.SubMenuID</td>
                                            <td>
                                                <strong>@it.Nombre</strong>
                                                <span class="ms-2 ov-badge small @(badge == null ? "d-none" : "")">
                                                    <span class="badge @(it.Estado == 1 ? "bg-success" : "bg-warning text-dark")">
                                                        @(badge ?? "")
                                                    </span>
                                                </span>
                                            </td>
                                            <td class="text-center">
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button type="button" class="btn btn-outline-success ov-btn" data-estado="1" title="Permitir acceso">
                                                        <i class="fas fa-check me-1"></i> Permitir
                                                    </button>
                                                    <button type="button" class="btn btn-outline-danger ov-btn" data-estado="0" title="Denegar acceso">
                                                        <i class="fas fa-times me-1"></i> Denegar
                                                    </button>
                                                    <button type="button" class="btn btn-outline-secondary ov-reset" title="Heredar del rol">
                                                        <i class="fas fa-undo-alt"></i>
                                                    </button>
                                                </div>
                                            </td>
                                            <td class="text-center ov-estado">
                                                @if (it.PermisoEfectivo)
                                                {
                                                    <span class="text-success" title="Efectivo: Sí">
                                                        <i class="fas fa-check-circle fa-lg"></i>
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted" title="Efectivo: No">
                                                        <i class="fas fa-times-circle fa-lg"></i>
                                                    </span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }

                <script>
                    (function () {
                        const url = '@Url.Action("SetOverride", "Usuarios")';
                        const usuarioId = document.getElementById('UsuarioID')?.value;
                        const token = document.getElementById('__afToken')?.value;

                        async function postSet(subMenuId, estado) {
                            const body = new URLSearchParams({
                                '__RequestVerificationToken': token,
                                'usuarioId': usuarioId,
                                'subMenuId': subMenuId,
                                'estado': estado
                            });

                            const res = await fetch(url, {
                                method: 'POST',
                                credentials: 'same-origin',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
                                    'RequestVerificationToken': token
                                },
                                body
                            });

                            const raw = await res.text();
                            let data;
                            try { data = JSON.parse(raw); } catch { throw new Error('Respuesta no JSON: ' + raw.slice(0, 150)); }
                            if (!res.ok || !data.ok) throw new Error(data?.message || 'Error al guardar');
                            return data; // { ok:true, estado, efectivo }
                        }

                        function setEstadoUI(tr, estado, efectivo) {
                            // badge override
                            const badgeWrap = tr.querySelector('.ov-badge');
                            if (estado === -1) {
                                badgeWrap?.classList.add('d-none');
                            } else {
                                const b = badgeWrap?.querySelector('.badge');
                                if (b) {
                                    b.className = 'badge ' + (estado === 1 ? 'bg-success' : 'bg-warning text-dark');
                                    b.textContent = (estado === 1 ? 'Override: Permitido' : 'Override: Denegado');
                                }
                                badgeWrap?.classList.remove('d-none');
                            }

                            // icono efectivo
                            const est = tr.querySelector('.ov-estado');
                            if (est) {
                                est.innerHTML = efectivo
                                    ? '<span class="text-success" title="Efectivo: Sí"><i class="fas fa-check-circle fa-lg"></i></span>'
                                    : '<span class="text-muted" title="Efectivo: No"><i class="fas fa-times-circle fa-lg"></i></span>';
                            }
                        }

                        // Delegación de eventos solo dentro del tab de permisos
                        document.getElementById('tab-permisos')?.addEventListener('click', async (ev) => {
                            const btn = ev.target.closest('.ov-btn, .ov-reset');
                            if (!btn) return;

                            const tr = btn.closest('tr');
                            const subMenuId = tr?.dataset.submenu;
                            const estado = btn.classList.contains('ov-reset') ? -1 : parseInt(btn.dataset.estado);

                            btn.disabled = true;
                            const originalHtml = btn.innerHTML;
                            btn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span> Guardando…';

                            try {
                                const r = await postSet(subMenuId, estado);
                                setEstadoUI(tr, r.estado, !!r.efectivo);
                            } catch (e) {
                                console.error(e);
                                alert('No se pudo guardar: ' + (e.message || e));
                            } finally {
                                btn.disabled = false;
                                btn.innerHTML = originalHtml;
                            }
                        });
                    })();
                </script>
            }
        </div>












    <!-- ==================== PESTAÑA: AUDITORÍA ==================== -->
    @if (!Model.EsModoCrear && Model.HistorialDeCambios != null && Model.HistorialDeCambios.Any())
    {
        <div class="tab-pane fade" id="tab-auditoria" role="tabpanel">
            <div class="audit-container">
                <div class="audit-header">
                    <h5 class="mb-1">Historial de Cambios</h5>
                    <p class="text-muted small mb-0">Registro completo de modificaciones</p>
                </div>

                <div class="timeline">
                    @foreach (var item in Model.HistorialDeCambios.OrderByDescending(x => x.FechaModificacion))
                    {
                        <div class="timeline-item">
                            <div class="timeline-marker"></div>
                            <div class="timeline-content">
                                <div class="timeline-date">
                                    <i class="fas fa-clock me-1"></i>
                                    @item.FechaModificacion.ToString("dd/MM/yyyy HH:mm")
                                </div>
                                <div class="timeline-description">@item.DescripcionDelCambio</div>
                                <div class="timeline-user">
                                    <i class="fas fa-user me-1"></i>
                                    @item.ModificadoPor
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<!-- ESTILOS MODERNOS -->
<style>
    /* ========== HEADER MODERNO ========== */
    .panel-header-modern {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        color: white;
        border-radius: 12px 12px 0 0;
    }

    .user-profile-section {
        display: flex;
        align-items: center;
        gap: 1.5rem;
    }

    .user-avatar-circle {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        font-weight: 700;
        border: 3px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .user-name {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .user-meta {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-top: 0.5rem;
    }

    .reset-password-link {
        color: rgba(255, 255, 255, 0.9);
        text-decoration: none;
        font-size: 0.875rem;
        transition: all 0.3s;
    }

    .reset-password-link:hover {
        color: white;
    }

    .btn-close-modern {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        color: white;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-close-modern:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: rotate(90deg);
    }

    /* ========== PESTAÑAS MODERNAS ========== */
    .nav-tabs-modern {
        background: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
        padding: 0 2rem;
    }

    .nav-tabs-modern .nav-link {
        border: none;
        color: #6c757d;
        font-weight: 500;
        padding: 1rem 1.5rem;
        transition: all 0.3s;
        position: relative;
    }

    .nav-tabs-modern .nav-link:hover {
        color: #495057;
        background: rgba(102, 126, 234, 0.1);
    }

    .nav-tabs-modern .nav-link.active {
        color: #667eea;
        background: white;
    }

    .nav-tabs-modern .nav-link.active::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        right: 0;
        height: 2px;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }

    /* ========== CONTENIDO MODERNO ========== */
    .tab-content-modern {
        background: white;
        padding: 2rem;
        border-radius: 0 0 12px 12px;
    }

    .form-modern {
        max-width: 900px;
        margin: 0 auto;
    }

    .form-section {
        margin-bottom: 2.5rem;
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 12px;
        border-left: 4px solid #667eea;
    }

    .section-header {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
    }

    .section-icon {
        color: #667eea;
        font-size: 1.25rem;
    }

    .section-title {
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        color: #495057;
    }

    .form-label-modern {
        font-weight: 500;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .form-control-modern, .form-select {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 0.625rem 1rem;
        transition: all 0.3s;
    }

    .form-control-modern:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.15);
    }

    .form-switch-modern .form-check-input {
        width: 3rem;
        height: 1.5rem;
        cursor: pointer;
    }

    .form-switch-modern .form-check-input:checked {
        background-color: #667eea;
        border-color: #667eea;
    }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        padding-top: 1.5rem;
        border-top: 2px solid #e9ecef;
    }

    .btn-modern {
        padding: 0.625rem 1.5rem;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s;
    }

    /* ========== PERMISOS ========== */
    .permissions-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .permissions-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e9ecef;
    }

    .permission-group {
        margin-bottom: 2rem;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        overflow: hidden;
    }

    .permission-group-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem 1.5rem;
        font-size: 1.125rem;
        display: flex;
        align-items: center;
    }

    .table-permissions {
        margin-bottom: 0;
    }

    .table-permissions thead {
        background: #f8f9fa;
    }

    .table-permissions th {
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #dee2e6;
        padding: 1rem;
    }

    .table-permissions td {
        padding: 1rem;
        vertical-align: middle;
    }

    .badge-custom {
        background: #fff3cd;
        color: #856404;
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }

    .status-badge {
        font-size: 1.5rem;
    }

    .status-active {
        color: #28a745;
    }

    .status-inactive {
        color: #6c757d;
    }

    /* ========== AUDITORÍA ========== */
    .audit-container {
        max-width: 900px;
        margin: 0 auto;
    }

    .audit-header {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e9ecef;
    }

    .timeline {
        position: relative;
        padding-left: 2rem;
    }

    .timeline::before {
        content: '';
        position: absolute;
        left: 0.5rem;
        top: 0;
        bottom: 0;
        width: 2px;
        background: #e9ecef;
    }

    .timeline-item {
        position: relative;
        margin-bottom: 1.5rem;
    }

    .timeline-marker {
        position: absolute;
        left: -1.5rem;
        top: 0.25rem;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: #667eea;
        border: 3px solid white;
        box-shadow: 0 0 0 2px #e9ecef;
    }

    .timeline-content {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 3px solid #667eea;
    }

    .timeline-date {
        font-size: 0.875rem;
        color: #6c757d;
        margin-bottom: 0.5rem;
    }

    .timeline-description {
        font-weight: 500;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .timeline-user {
        font-size: 0.875rem;
        color: #6c757d;
    }

    /* ========== ESTADO VACÍO ========== */
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
    }

    .empty-state-icon {
        font-size: 4rem;
        color: #dee2e6;
        margin-bottom: 1rem;
    }

    .empty-state h5 {
        color: #495057;
        margin-bottom: 0.5rem;
    }

    
</style>

<!-- JAVASCRIPT -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Cerrar panel
        const closeBtn = document.getElementById('close-panel-btn');
        const cancelBtn = document.getElementById('cancel-btn');

        if (closeBtn) {
            closeBtn.addEventListener('click', function() {
                window.location.href = '@Url.Action("Index", "Usuarios")';
            });
        }

        if (cancelBtn) {
            cancelBtn.addEventListener('click', function() {
                window.location.href = '@Url.Action("Index", "Usuarios")';
            });
        }

        // Activar validación
        const form = document.getElementById('user-form');
        if (form) {
            form.addEventListener('submit', function(e) {
                if (!form.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                form.classList.add('was-validated');
            });
        }

        // Feedback visual en botones de permisos
        const permissionForms = document.querySelectorAll('#tab-permisos form');
        permissionForms.forEach(form => {
            form.addEventListener('submit', function() {
                const btn = this.querySelector('button[type="submit"]');
                if (btn) {
                    btn.disabled = true;
                    btn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Guardando...';
                }
            });
        });

        // Activar pestaña desde query string
        const urlParams = new URLSearchParams(window.location.search);
        const tab = urlParams.get('tab');
        if (tab) {
            const tabButton = document.getElementById(tab + '-tab');
            if (tabButton) {
                const bsTab = new bootstrap.Tab(tabButton);
                bsTab.show();
            }
        }
    });

        document.querySelectorAll('#tab-permisos form').forEach(form => {
        form.addEventListener('submit', function(e) {
            const btn = this.querySelector('button[type="submit"]');
            if (btn && !btn.disabled) {
                btn.disabled = true;
                btn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Guardando...';
            }
        });
    });

    // Mostrar notificación si hubo éxito
    @if (TempData["SuccessMessage"] != null)
    {
            <text>
            setTimeout(() => {
                const alert = document.createElement('div');
                alert.className = 'alert alert-success alert-dismissible fade show position-fixed top-0 end-0 m-3';
                alert.style.zIndex = '9999';
                alert.innerHTML = `
                    <strong>✓ Éxito:</strong> @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                document.body.appendChild(alert);
                setTimeout(() => alert.remove(), 4000);
            }, 500);
            </text>
    }


</script>


