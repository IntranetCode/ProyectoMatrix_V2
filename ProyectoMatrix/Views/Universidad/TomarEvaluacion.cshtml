@model ProyectoMatrix.Models.TomarEvaluacionViewModel
@{
    ViewData["Title"] = "Evaluación";
    Layout = "~/Views/Universidad/_LayoutUniversidad.cshtml";
}
@Html.AntiForgeryToken()

<div class="container-fluid p-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="mb-1">
                                <i class="fas fa-clipboard-check me-2"></i>
                                Evaluación: @Model.NombreSubCurso
                            </h2>
                            <p class="mb-0 opacity-75">@Model.NombreCurso</p>
                        </div>
                        <div class="text-end">
                            <div class="bg-white bg-opacity-20 rounded p-3">
                                <div class="fs-3 fw-bold" id="cronometro">@Model.TiempoLimiteMinutos:00</div>
                                <small>Tiempo restante</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Información del intento -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="alert alert-info">
                <div class="row">
                    <div class="col-md-3">
                        <strong>Intento #@Model.NumeroIntento</strong>
                    </div>
                    <div class="col-md-3">
                        <strong>@Model.Preguntas.Count preguntas</strong>
                    </div>
                    <div class="col-md-3">
                        <strong>Mínimo: @Model.PuntajeMinimoAprobacion%</strong>
                    </div>
                    <div class="col-md-3">
                        <strong>Tiempo: @Model.TiempoLimiteMinutos min</strong>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            @if (Model.UltimoIntento != null)
            {
                <div class="alert @(Model.UltimoIntento.Aprobado ? "alert-success" : "alert-warning")">
                    <strong>Último intento:</strong>
                    @Model.UltimoIntento.PorcentajeCalificacion.ToString("F1")%
                    (@Model.UltimoIntento.CalificacionTexto)
                </div>
            }
        </div>
    </div>

    <!-- Formulario de evaluación -->
    <form id="formEvaluacion">
        <input type="hidden" id="subCursoId" value="@Model.SubCursoID">
        <input type="hidden" id="tiempoInicio" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss")">
        <input type="hidden" id="usuarioId" value="@ViewBag.UsuarioId">
        <input type="hidden" id="empresaId" value="@ViewBag.EmpresaId">

        @{
            var num = 0;
        }
        @foreach (var pregunta in Model.Preguntas.OrderBy(p => p.Orden))
        {
            num++;
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card border-0 shadow-sm">
                        <div class="card-header bg-light">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0">
                                    Pregunta @num
                                </h5>
                                <span class="badge bg-primary">@pregunta.PuntajeMaximo pts</span>
                            </div>
                        </div>
                        <div class="card-body">
                            <h6 class="mb-4">@pregunta.TextoPregunta</h6>

                            @* Múltiple *@
                            @if (pregunta.TipoPregunta == "Multiple")
                            {
                                foreach (var opcion in pregunta.Opciones.OrderBy(o => o.Orden))
                                {
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio"
                                               name="pregunta_@pregunta.PreguntaID"
                                               id="opcion_@opcion.OpcionID"
                                               value="@opcion.OpcionID">
                                        <label class="form-check-label w-100" for="opcion_@opcion.OpcionID">
                                            <div class="p-2 rounded hover-bg-light">@opcion.TextoOpcion</div>
                                        </label>
                                    </div>
                                }
                            }
                            else if (pregunta.TipoPregunta == "Verdadero/Falso")
                            {
                                var opV = pregunta.Opciones.First(o => o.TextoOpcion == "Verdadero");
                                var opF = pregunta.Opciones.First(o => o.TextoOpcion == "Falso");
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="radio"
                                           name="pregunta_@pregunta.PreguntaID"
                                           id="verdadero_@pregunta.PreguntaID"
                                           value="@opV.OpcionID">
                                    <label class="form-check-label" for="verdadero_@pregunta.PreguntaID">
                                        <span class="badge bg-success me-2">V</span> Verdadero
                                    </label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="radio"
                                           name="pregunta_@pregunta.PreguntaID"
                                           id="falso_@pregunta.PreguntaID"
                                           value="@opF.OpcionID">
                                    <label class="form-check-label" for="falso_@pregunta.PreguntaID">
                                        <span class="badge bg-danger me-2">F</span> Falso
                                    </label>
                                </div>
                            }
                            else if (pregunta.TipoPregunta == "Abierta")
                            {
                                <textarea class="form-control" rows="4"
                                  name="pregunta_abierta_@pregunta.PreguntaID"
                                  placeholder="Escriba su respuesta aquí..."></textarea>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }


        <!-- Botones de acción -->
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <button type="button" class="btn btn-outline-secondary" onclick="guardarBorrador()">
                                    <i class="fas fa-save me-2"></i>
                                    Guardar Borrador
                                </button>
                            </div>
                            <div>
                                <button type="button" class="btn btn-warning me-2" onclick="confirmarEntrega()">
                                    <i class="fas fa-paper-plane me-2"></i>
                                    Entregar Evaluación
                                </button>
                                <a id="btnSalirSinGuardar" href="/Universidad/MisCursos" class="btn btn-outline-danger">
                                    <i class="fas fa-times me-2"></i>
                                    Salir sin Guardar
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Modal de confirmación -->
<div class="modal fade" id="modalConfirmacion" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Entrega</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de entregar la evaluación?</p>
                <p><strong>Advertencia:</strong> Una vez entregada, no podrá modificar sus respuestas.</p>

                <div class="mt-3" id="resumenRespuestas">
                    <!-- Se llena dinámicamente -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="entregarEvaluacion()">
                    <i class="fas fa-paper-plane me-2"></i>Entregar
                </button>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    <script>

        // Guard para bloquear salir/recargar mientras se responde
        window.unloadGuard = {
            enabled: false,
            handler: function (e) {
                e.preventDefault();
                e.returnValue = '';
                return '';
            },
            enable: function () {
                if (this.enabled) return;
                window.addEventListener('beforeunload', this.handler);
                this.enabled = true;
            },
            disable: function () {
                if (!this.enabled) return;
                window.removeEventListener('beforeunload', this.handler);
                this.enabled = false;
            }
        };


        // Variables globales
        let tiempoInicio = new Date();
        let tiempoLimite = @Model.TiempoLimiteMinutos * 60; // en segundos
        let tiempoRestante = tiempoLimite;
        let cronometroInterval;

        // Inicializar
        document.addEventListener('DOMContentLoaded', function() {
            unloadGuard.enable();
            iniciarCronometro();
            // Autoguardar cada 2 minutos
            setInterval(guardarBorrador, 120000);
        });

        function iniciarCronometro() {
            cronometroInterval = setInterval(function() {
                tiempoRestante--;

                const minutos = Math.floor(tiempoRestante / 60);
                const segundos = tiempoRestante % 60;

                document.getElementById('cronometro').textContent =
                    `${minutos.toString().padStart(2, '0')}:${segundos.toString().padStart(2, '0')}`;

                // Cambiar color cuando queden 5 minutos
                if (tiempoRestante <= 300) {
                    document.getElementById('cronometro').parentElement.className =
                        'bg-danger bg-opacity-20 rounded p-3';
                }

                // Entregar automáticamente cuando se acabe el tiempo
                if (tiempoRestante <= 0) {
                    clearInterval(cronometroInterval);
                    alert('Se agotó el tiempo. La evaluación se entregará automáticamente.');
                    entregarEvaluacion();
                }
            }, 1000);
        }

        function guardarBorrador() {
            const respuestas = recopilarRespuestas();

            // Aquí iría la llamada AJAX para guardar borrador
            console.log('Guardando borrador:', respuestas);

            // Mostrar notificación
            mostrarNotificacion('Borrador guardado', 'success');
        }

        function confirmarEntrega() {
            const respuestas = recopilarRespuestas();
            const totalPreguntas = @Model.Preguntas.Count;
            const preguntasRespondidas = Object.keys(respuestas).length;

            // Mostrar resumen en el modal
            const resumen = document.getElementById('resumenRespuestas');
            resumen.innerHTML = `
                <div class="alert alert-info">
                    <strong>Resumen:</strong><br>
                    Preguntas respondidas: ${preguntasRespondidas} de ${totalPreguntas}<br>
                    Tiempo empleado: ${formatearTiempo(tiempoLimite - tiempoRestante)}
                </div>
            `;

            if (preguntasRespondidas < totalPreguntas) {
                resumen.innerHTML += `
                    <div class="alert alert-warning">
                        <strong>Atención:</strong> Aún quedan ${totalPreguntas - preguntasRespondidas} preguntas sin responder.
                    </div>
                `;
            }

            // Mostrar modal
            new bootstrap.Modal(document.getElementById('modalConfirmacion')).show();
        }

      

                function recopilarRespuestas() {
            const respuestas = {};

            // Opción múltiple y V/F
            document.querySelectorAll('input[type="radio"]:checked').forEach(input => {
                const preguntaId = parseInt(input.name.split('_')[1]);
                respuestas[preguntaId] = {
                    tipo: 'opcion',
                    opcionId: parseInt(input.value)
                };
            });

            // Preguntas abiertas
            document.querySelectorAll('textarea[name^="pregunta_abierta_"]').forEach(textarea => {
                const preguntaId = parseInt(textarea.name.split('_')[2]);
                if (textarea.value.trim()) {
                    respuestas[preguntaId] = {
                        tipo: 'abierta',
                        texto: textarea.value.trim()
                    };
                }
            });

            return respuestas;
        }






        function formatearTiempo(segundos) {
            const minutos = Math.floor(segundos / 60);
            const segs = segundos % 60;
            return `${minutos}:${segs.toString().padStart(2, '0')}`;
        }

        function mostrarNotificacion(mensaje, tipo) {
            // Crear notificación temporal
            const notif = document.createElement('div');
            notif.className = `alert alert-${tipo} position-fixed`;
            notif.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notif.innerHTML = `
                <i class="fas fa-info-circle me-2"></i>${mensaje}
                <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
            `;

            document.body.appendChild(notif);

            // Quitar después de 3 segundos
            setTimeout(() => {
                if (notif.parentElement) {
                    notif.remove();
                }
            }, 3000);
        }


    </script>
    <script>
        // === Token antiforgery
        function getCsrf() {
          return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
        }

        // === Construir DICCIONARIO { [preguntaId]: RespuestaDto }
        function recopilarRespuestasDict() {
          const dic = {};

          // Radios (múltiple y V/F)
          document.querySelectorAll('input[type="radio"]:checked').forEach(input => {
            const preguntaId = parseInt(input.name.split('_')[1], 10);
            const opcionId = parseInt(input.value, 10);
            if (!Number.isNaN(preguntaId) && !Number.isNaN(opcionId)) {
              dic[preguntaId] = { Tipo: 'opcion', OpcionId: opcionId, Texto: null };
            }
          });

          // Abiertas
          document.querySelectorAll('textarea[name^="pregunta_abierta_"]').forEach(t => {
            const preguntaId = parseInt(t.name.split('_')[2], 10);
            const texto = (t.value || '').trim();
            if (!Number.isNaN(preguntaId) && texto.length) {
              dic[preguntaId] = { Tipo: 'abierta', OpcionId: null, Texto: texto };
            }
          });

          return dic;
        }

        async function entregarEvaluacion() {
          // desactiva guard si lo usas
          window.unloadGuard?.disable?.();

          const subCursoId = parseInt(document.getElementById('subCursoId')?.value || '0', 10);
          if (!subCursoId) {
            alert('No se detectó el SubCursoId. Recarga la página.');
            window.unloadGuard?.enable?.();
            return;
          }

          const respuestasDict = recopilarRespuestasDict();

          // ⏱ el modelo espera MINUTOS
          const tiempoEmpleadoMin = Math.max(0, Math.floor((@Model.TiempoLimiteMinutos * 60 - (typeof tiempoRestante === 'number' ? tiempoRestante : 0)) / 60));

          // ⚠️ Usa **PascalCase** para minimizar riesgos de binding
          const payload = {
            SubCursoId: subCursoId,
            TiempoEmpleado: tiempoEmpleadoMin,
            Respuestas: respuestasDict
            // UsuarioId/EmpresaId existen en el DTO, pero no son necesarios: los tomamos de sesión
          };

          // (Debug) te muestra exactamente lo que se envía
          console.debug('Payload entrega', payload, JSON.stringify(payload));

          try {
            const resp = await fetch('/Universidad/EntregarEvaluacion', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getCsrf()
              },
              credentials: 'same-origin',
              body: JSON.stringify(payload)
            });

            if (!resp.ok) {
              const txt = await resp.text();
              const msg = (resp.status === 400 || resp.status === 403)
                ? 'Sesión expirada o token inválido. Recarga la página.'
                : `Error ${resp.status}.`;
              console.error('Respuesta no OK', resp.status, txt);
              alert('Error al entregar la evaluación: ' + msg);
              window.unloadGuard?.enable?.();
              return;
            }

            const data = await resp.json();
            if (data?.success) {
              let msg = `Evaluación entregada.\nCalificación: ${data.calificacion}%\nEstado: ${data.aprobado ? 'APROBADO' : 'REPROBADO'}`;
              if (data.cursoCompleto) msg += `\n🎉 ¡Curso completado!`;
              alert(msg);
              window.location.href = '/Universidad/MisCursos';
            } else {
              alert('Error: ' + (data?.message || 'No se pudo entregar.'));
              window.unloadGuard?.enable?.();
            }
          } catch (e) {
            console.error('Error entregando evaluación', e);
            alert('Error al entregar la evaluación.');
            window.unloadGuard?.enable?.();
          }
        }
    </script>


    
}

<style>
    .hover-bg-light:hover {
        background-color: #f8f9fa !important;
    }

    .form-check-label {
        cursor: pointer;
    }

    .form-check-input:checked + .form-check-label .p-2 {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
    }

    @@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap');

    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f8f9fa; /* Gris claro */
        color: #495057; /* Gris oscuro */
    }

   
    .header-card {
        background: linear-gradient(135deg, #3B71CA, #325f9d); /* Gradiente azul */
        border-radius: 0.5rem;
        color: white;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }

        .header-card h2 {
            font-weight: 600;
        }

        .header-card .opacity-75 {
            opacity: 0.85 !important;
        }

    #cronometro {
        font-family: monospace;
        font-size: 2.25rem;
        font-weight: 700;
        color: orangered;
        text-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .timer-box {
        background-color: rgba(255, 255, 255, 0.15);
        border-radius: 0.5rem;
        padding: 1rem;
        backdrop-filter: blur(5px);
    }

    /* --- Tarjetas de Información --- */
    .alert {
        border-radius: 0.5rem;
        border-width: 0;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        padding: 1rem 1.25rem;
    }

    .alert-info {
        background-color: #e2f3ff;
        color: #0c5460;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-warning {
        background-color: #fff3cd;
        color: #856404;
    }

    /* --- Tarjetas de Preguntas --- */
    .question-card {
        border: none;
        border-radius: 0.5rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
        overflow: hidden; /* Para que el header se ajuste a los bordes redondeados */
    }

        .question-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
        }

        .question-card .card-header {
            background-color: #ffffff;
            border-bottom: 1px solid #e9ecef; /* Gris medio */
        }

        .question-card .card-title {
            font-weight: 600;
            color: #325f9d; /* Azul oscuro */
        }

        .question-card .card-body h6 {
            font-size: 1.1rem;
            font-weight: 500;
            line-height: 1.6;
        }

    /* --- Estilos para Opciones de Respuesta --- */
    .form-check {
        padding-left: 0; /* Reseteamos padding para control total */
    }

    .form-check-input {
        display: none; /* Ocultamos el radio button real */
    }

    .form-check-label {
        display: block;
        width: 100%;
        padding: 0.75rem 1.25rem;
        border: 1px solid #e9ecef; /* Gris medio */
        border-radius: 0.5rem;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        margin-bottom: 0.5rem;
    }

        /* Estado Hover */
        .form-check-label:hover {
            background-color: #f8f9fa; /* Gris claro */
            border-color: #3B71CA; /* Azul primario */
        }

    /* Estado Seleccionado */
    .form-check-input:checked + .form-check-label {
        background-color: #eaf2ff;
        border-color: #3B71CA; /* Azul primario */
        color: #325f9d; /* Azul oscuro */
        font-weight: 500;
        box-shadow: 0 0 0 2px rgba(59, 113, 202, 0.25);
    }

    /* Estilos para Verdadero/Falso */
    .vf-label .badge {
        font-size: 0.9rem;
        padding: 0.4em 0.6em;
        font-weight: 600;
    }

    .form-check-input:checked + .vf-label {
        font-weight: 600;
    }


    /* --- Área de texto para preguntas abiertas --- */
    textarea.form-control {
        border-radius: 0.5rem;
        border-color: #e9ecef; /* Gris medio */
        transition: border-color 0.2s, box-shadow 0.2s;
    }

        textarea.form-control:focus {
            border-color: #3B71CA; /* Azul primario */
            box-shadow: 0 0 0 2px rgba(59, 113, 202, 0.25);
        }

    /* --- Botones de Acción --- */
    .action-card {
        border: none;
        background-color: transparent;
        box-shadow: none;
    }

    .btn {
        border-radius: 0.5rem;
        padding: 0.75rem 1.25rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
        }

    .btn-warning {
        color: #333333;
        font-weight: 600;
    }

    /* --- Estilos del Modal --- */
    .modal-content {
        border: none;
        border-radius: 0.5rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .modal-header {
        border-bottom: 1px solid #e9ecef; /* Gris medio */
    }

        .modal-header .modal-title {
            font-weight: 600;
        }

    .modal-footer {
        border-top: 1px solid #e9ecef; /* Gris medio */
    }



</style>