@model ProyectoMatrix.Models.SubCursoDetalle

@{
    ViewData["Title"] = $"{Model.NombreSubCurso} - Universidad NS";
    Layout = "_LayoutUniversidad";

    var usuarioId = ViewBag.UsuarioId ?? 0;
    var empresaId = ViewBag.EmpresaId ?? 0;
}


<meta http-equiv="Cache-Control" content="no-store, no-cache, must-revalidate" />
<meta http-equiv="Pragma" content="no-cache" />
<meta http-equiv="Expires" content="0" />

<div class="subcurso-container">
    <!-- Header de navegación -->
    <div class="subcurso-header">
        <div class="container-fluid">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/Universidad">Universidad NS</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/Universidad/MisCursos">Mis Cursos</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/Universidad/TomarCurso/@Model.CursoID">Curso</a>
                    </li>
                    <li class="breadcrumb-item active">@Model.NombreSubCurso</li>
                </ol>
            </nav>

            <div class="subcurso-title-section">
                <h1 class="subcurso-title">@Model.NombreSubCurso</h1>
                <div class="subcurso-meta">
                    <span class="meta-item">
                        <i class="fas fa-play-circle"></i>
                        Módulo @Model.Orden
                    </span>
                    @if (Model.DuracionVideo.HasValue)
                    {
                        <span class="meta-item">
                            <i class="fas fa-clock"></i>
                            @TimeSpan.FromSeconds(Model.DuracionVideo.Value).ToString(@"mm\:ss")
                        </span>
                    }
                    @if (Model.RequiereEvaluacion)
                    {
                        <span class="meta-item">
                            <i class="fas fa-clipboard-check"></i>
                            Con Evaluación
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Contenido principal -->
    <div class="container-fluid mt-4">
        <div class="row">
            <!-- Sección del video -->
            <div class="col-xl-9">
                <div class="video-section">
                    <!-- Video Player -->
                    @if (!string.IsNullOrEmpty(Model.ArchivoVideo))
                    {
                        <div class="ns-video">
                            <video id="videoPlayer"
                                   preload="metadata"
                                   class="ns-video-el"
                                   data-subcurso-id="@Model.SubCursoID"
                                   data-usuario-id="@usuarioId"
                                   data-empresa-id="@empresaId"
                                   controlslist="nodownload noplaybackrate noremoteplayback"
                                   playsinline
                                   disablepictureinpicture
                                   tabindex="0"
                                   oncontextmenu="return false">
                                <source src="~/contenidos/@Model.ArchivoVideo" type="video/mp4" />
                                Tu navegador no soporta video HTML5.
                            </video>


                            <!-- Controles personalizados -->
                            <div class="ns-controls">
                                <div class="ns-left">
                                    <button type="button" class="ns-btn ns-btn-primary" id="btnPlay" aria-label="Reproducir/Pausa">
                                        <span class="ns-icon ns-icon-play" id="iconPlay"></span>
                                    </button>
                                    <button type="button" class="ns-btn" id="btnBack" aria-label="Retroceder 10 segundos" title="Retroceder 10s">
                                        <span class="ns-icon ns-icon-back"></span>
                                    </button>
                                    <button type="button" class="ns-btn ns-btn-disabled" id="btnFwd" aria-label="Adelantar deshabilitado"
                                            title="Adelantar deshabilitado" disabled>
                                        <span class="ns-icon ns-icon-fwd"></span>
                                    </button>
                                </div>

                                <div class="ns-right">
                                    <div class="ns-progress" aria-hidden="true">
                                        <div class="ns-progress-bar">
                                            <div class="ns-progress-fill" id="progressFill" style="width:0%"></div>
                                        </div>
                                        <div class="ns-times">
                                            <span id="timeCurrent">0:00</span>
                                            <span id="timeSep">/</span>
                                            <span id="timeDuration">0:00</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Overlay de progreso -->
                            <div class="video-progress-overlay" id="videoProgressOverlay">
                                <div class="progress-info">
                                    <span>Progreso: <span id="progressPercentage">@Model.PorcentajeVisto.ToString("F0")</span>%</span>
                                    <span>Tiempo visto: <span id="timeWatched">@TimeSpan.FromSeconds(Model.TiempoTotalVisto).ToString(@"mm\:ss")</span></span>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="no-video-placeholder">
                            <i class="fas fa-video-slash fa-4x text-muted mb-3"></i>
                            <h5 class="text-muted">No hay video disponible</h5>
                            <p class="text-muted">Este módulo no tiene contenido multimedia.</p>
                        </div>
                    }

                    <!-- Descripción del módulo -->
                    @if (!string.IsNullOrEmpty(Model.Descripcion))
                    {
                        <div class="module-description mt-4">
                            <h5>Descripción del módulo</h5>
                            <p>@Model.Descripcion</p>
                        </div>
                    }

                    <!-- Progreso del usuario -->
                    <div class="progress-summary mt-4">
                        <h5>Tu progreso</h5>
                        <div class="progress-stats">
                            <div class="stat-item">
                                <span class="stat-label">Tiempo visto:</span>
                                <span class="stat-value" id="displayTimeWatched">
                                    @TimeSpan.FromSeconds(Model.TiempoTotalVisto).ToString(@"mm\:ss")
                                </span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Progreso:</span>
                                <span class="stat-value" id="displayProgress">@Model.PorcentajeVisto.ToString("F1")%</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Estado:</span>
                                <span class="badge @(Model.Completado ? "bg-success" : Model.PorcentajeVisto > 0 ? "bg-primary" : "bg-secondary")" id="displayStatus">
                                    @(Model.Completado ? "Completado" : Model.PorcentajeVisto > 0 ? "En Progreso" : "Sin Iniciar")
                                </span>
                            </div>
                        </div>

                        <div class="progress-bar-container mt-3">
                            <div class="progress">
                                <div class="progress-bar bg-primary"
                                     id="overallProgressBar"
                                     style="width: @Model.PorcentajeVisto%"></div>
                            </div>
                            <small class="text-muted mt-1 d-block">
                                Debes ver al menos el 95% del video para completar el módulo
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-xl-3">
                <!-- Navegación -->
                <div class="sidebar-card mb-4">
                    <h6 class="sidebar-card-title">
                        <i class="fas fa-list me-2"></i>Navegación
                    </h6>
                    <div class="navigation-buttons">
                        <a href="/Universidad/TomarCurso/@Model.CursoID"
                           class="btn btn-outline-primary w-100 mb-2">
                            <i class="fas fa-arrow-left me-2"></i>Volver al Curso
                        </a>

                        <button class="btn btn-success w-100"
                                id="completeModuleBtn"
                                style="display: none;">
                            <i class="fas fa-check me-2"></i>Marcar como Completado
                        </button>
                    </div>
                </div>

                <!-- Material adicional -->
                @if (!string.IsNullOrEmpty(Model.ArchivoPDF))
                {
                    <div class="sidebar-card mb-4">
                        <h6 class="sidebar-card-title">
                            <i class="fas fa-file-alt me-2"></i>Material Adicional
                        </h6>
                        <div class="material-item">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-file-pdf text-danger me-3 fa-2x"></i>
                                <div class="flex-grow-1">
                                    <h6 class="mb-1">Documento PDF</h6>
                                    <small class="text-muted">Material complementario</small>
                                </div>
                            </div>
                            <div class="mt-2">
                                <a id="btnVerPdf"
                                   href="~/contenidos/@Model.ArchivoPDF"
                                   target="_blank"
                                   class="btn btn-outline-danger btn-sm me-2">
                                    <i class="fas fa-eye me-1"></i> Ver
                                </a>
                                <a href="~/contenidos/@Model.ArchivoPDF"
                                   download
                                   class="btn btn-outline-primary btn-sm">
                                    <i class="fas fa-download me-1"></i> Descargar
                                </a>
                            </div>
                        </div>
                    </div>
                }

                <!-- Evaluación -->
                @if (Model.RequiereEvaluacion)
                {
                    <div class="sidebar-card mb-4">
                        <h6 class="sidebar-card-title">
                            <i class="fas fa-clipboard-check me-2"></i>Evaluación
                        </h6>

                        @if (Model.UltimoIntento != null)
                        {
                            <div class="evaluation-info mb-3">
                                <div class="alert @(Model.UltimoIntento.Aprobado ? "alert-success" : "alert-warning") py-2">
                                    <small>
                                        <strong>Último intento:</strong><br>
                                        @Model.UltimoIntento.PorcentajeCalificacion.ToString("F1")%
                                        (@(Model.UltimoIntento.Aprobado ? "Aprobado" : "Reprobado"))
                                    </small>
                                </div>
                            </div>
                        }

                        <div class="evaluation-requirements mb-3">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                Puntaje mínimo: @Model.PuntajeMinimo%
                            </small>
                        </div>

                        <a class="btn btn-warning w-100" id="startEvaluationBtn"
                           href="@Url.RouteUrl("Uni_TomarEvaluacion", new { subCursoId = Model.SubCursoID })"
                           data-subcurso-id="@Model.SubCursoID">
                            <i class="fas fa-play-circle me-2"></i>
                            @(Model.UltimoIntento?.Aprobado == true ? "Repetir Evaluación" : "Tomar Evaluación")
                        </a>



                       

                    </div>
                }


                @*
                <!-- Notas personales -->
                <div class="sidebar-card">
                    <h6 class="sidebar-card-title">
                        <i class="fas fa-sticky-note me-2"></i>Mis Notas
                    </h6>
                    <textarea class="form-control"
                              id="moduleNotes"
                              rows="4"
                              placeholder="Escribe tus notas sobre este módulo..."></textarea>
                    <button class="btn btn-outline-primary btn-sm mt-2" id="saveNotesBtn">
                        <i class="fas fa-save me-1"></i>Guardar
                    </button>
                </div> 
                *@

            </div>
        </div>
    </div>
</div>

<!-- Modal de evaluación (si lo usas para futura carga parcial) -->
<div class="modal fade" id="evaluationModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-clipboard-check me-2"></i>
                    Evaluación: @Model.NombreSubCurso
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="evaluationContent">
                <!-- Contenido cargado dinámicamente -->
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary: #004AAD;
        --secondary: #FF6F00;
        --success: #2E7D32;
        --warning: #FFC107;
        --info: #0288D1;
        --danger: #D32F2F;
        --gray-50: #f9fafb;
        --gray-100: #f3f4f6;
        --gray-200: #e5e7eb;
        --gray-600: #4b5563;
        --gray-800: #1f2937;
    }

    .subcurso-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #f8fafc 0%, #eef4ff 100%);
        font-family: 'Segoe UI', Roboto, sans-serif;
    }

    .subcurso-header {
        background: white;
        padding: 2rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        border-bottom: 4px solid var(--primary);
    }

    .subcurso-title {
        color: var(--primary);
        font-weight: 800;
        font-size: 2rem;
        margin-bottom: 1rem;
    }

    .subcurso-meta {
        display: flex;
        gap: 1.5rem;
        flex-wrap: wrap;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--gray-600);
        font-size: 0.9rem;
    }

    .video-section {
        background: white;
        border-radius: 14px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        margin-bottom: 2rem;
    }

    .video-progress-overlay {
        position: absolute;
        top: 12px;
        right: 12px;
        background: rgba(0,0,0,0.7);
        color: #fff;
        padding: 0.4rem 0.9rem;
        border-radius: 8px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .no-video-placeholder {
        text-align: center;
        padding: 5rem 2rem;
        background: var(--gray-50);
        border-radius: 14px;
    }

        .no-video-placeholder i {
            font-size: 3rem;
            color: var(--primary);
            margin-bottom: 1rem;
        }

    .progress-summary {
        padding: 1.5rem;
    }

    .progress-stats {
        display: flex;
        gap: 2rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
    }

    .stat-item {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
        background: var(--gray-50);
        border-radius: 10px;
        padding: 1rem;
        flex: 1;
    }

    .stat-label {
        font-size: 0.8rem;
        color: var(--gray-600);
        font-weight: 500;
    }

    .stat-value {
        font-weight: 700;
        font-size: 1.1rem;
        color: var(--primary);
    }

    .progress-bar-container .progress {
        height: 10px;
        border-radius: 6px;
    }

    .progress-bar-container .progress-bar {
        background-color: var(--secondary);
    }

    .sidebar-card {
        background: white;
        border-radius: 14px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        overflow: hidden;
        margin-bottom: 1.5rem;
    }

    .sidebar-card-title {
        background: var(--gray-50);
        padding: 1rem 1.5rem;
        margin: 0;
        border-bottom: 1px solid var(--gray-200);
        font-weight: 700;
        color: var(--primary);
    }

    .navigation-buttons .btn {
        border-radius: 8px;
        font-weight: 600;
        padding: 0.6rem 1.2rem;
    }

    /* Video + Controles */
    .ns-video {
        position: relative;
        width: 100%;
        background: #000;
        border-radius: 12px;
        overflow: hidden;
    }

    .ns-video-el {
        width: 100%;
        height: auto;
        display: block;
        background: #000;
    }

    .ns-controls {
        position: absolute;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: .75rem;
        padding: .75rem .9rem;
        background: linear-gradient(transparent, rgba(0,0,0,.6));
        color: #fff;
        user-select: none;
    }

    .ns-left, .ns-right {
        display: flex;
        align-items: center;
        gap: .5rem;
    }

    .ns-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 38px;
        height: 38px;
        border-radius: 10px;
        border: 1px solid rgba(255,255,255,.25);
        background: rgba(255,255,255,.08);
        color: #fff;
        transition: .2s ease;
        backdrop-filter: blur(2px);
    }

        .ns-btn:hover {
            background: rgba(255,255,255,.18);
            border-color: rgba(255,255,255,.35);
        }

    .ns-btn-primary {
        width: 44px;
        height: 44px;
        border-color: transparent;
        background: #2563eb;
    }

        .ns-btn-primary:hover {
            background: #1e4ed8;
        }

    .ns-btn-disabled, .ns-btn[disabled] {
        opacity: .45;
        cursor: not-allowed;
        filter: grayscale(20%);
        pointer-events: none;
    }

    .ns-icon {
        width: 0;
        height: 0;
        position: relative;
        display: block;
    }

    .ns-icon-play {
        border-left: 10px solid #fff;
        border-top: 6px solid transparent;
        border-bottom: 6px solid transparent;
    }

    .ns-icon-pause {
        width: 12px;
        height: 12px;
        box-sizing: content-box;
    }

        .ns-icon-pause::before, .ns-icon-pause::after {
            content: "";
            position: absolute;
            top: 0;
            width: 4px;
            height: 12px;
            background: #fff;
            border-radius: 1px;
        }

        .ns-icon-pause::before {
            left: 0;
        }

        .ns-icon-pause::after {
            right: 0;
        }

    .ns-progress {
        display: flex;
        align-items: center;
        gap: .6rem;
        min-width: 220px;
    }

    .ns-progress-bar {
        position: relative;
        width: 360px;
        max-width: 48vw;
        height: 6px;
        border-radius: 999px;
        background: rgba(255,255,255,.25);
        overflow: hidden;
        pointer-events: none;
    }

    .ns-progress-fill {
        height: 100%;
        width: 0%;
        background: #22c55e;
        transition: width .15s linear;
    }

    .ns-times {
        font: 500 13px/1.2 system-ui, -apple-system, Segoe UI, Roboto, Arial;
        opacity: .95;
    }

    #timeSep {
        opacity: .7;
        margin: 0 .25rem;
    }

    @@media (max-width: 768px) {
        .subcurso-title {
            font-size: 1.6rem;
        }

        .progress-stats {
            flex-direction: column;
            gap: 1rem;
        }

        .meta-item {
            font-size: 0.8rem;
        }
    }

    .ns-progress,
    .video-progress-overlay {
        pointer-events: none;
    }

    .ns-controls {
        z-index: 2;
    }

    .ns-video-el {
        z-index: 1;
    }

</style>

@section Scripts {
    @Html.AntiForgeryToken()
    <script>
        const CONFIG = {
            subCursoId: @Model.SubCursoID,
            usuarioId: @ViewBag.UsuarioId,
            empresaId: @ViewBag.EmpresaId,
            requiereEvaluacion: @Model.RequiereEvaluacion.ToString().ToLower(),
            tieneVideo: @((!string.IsNullOrEmpty(Model.ArchivoVideo)).ToString().ToLower()),
            tienePDF: @((!string.IsNullOrEmpty(Model.ArchivoPDF)).ToString().ToLower()),
            initialTimeWatched: @Model.TiempoTotalVisto,
            initialProgress: @Model.PorcentajeVisto
        };

        const LS_KEY = `uni:vid:${CONFIG.usuarioId}:${CONFIG.empresaId}:${CONFIG.subCursoId}`;
        const LS_TIME_KEY = `uni:time:${CONFIG.usuarioId}:${CONFIG.empresaId}:${CONFIG.subCursoId}`;

        function getCsrfToken() {
            const el = document.querySelector('input[name="__RequestVerificationToken"]');
            return el ? el.value : '';
        }

        async function postJson(url, payload) {
            const headers = {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getCsrfToken()
            };
            const response = await fetch(url, {
                method: 'POST',
                headers,
                credentials: 'same-origin',
                body: JSON.stringify(payload)
            });
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            return response.json();
        }

        let prerrequisitosEstado = { videoCompleto: false, pdfVisto: false };

        // --- Prerrequisitos / botón evaluación ---
        async function verificarPrerequisitos() {
            if (!CONFIG.requiereEvaluacion) return;
            try {
                const resp = await postJson('@Url.Action("PrereqEstado", "Universidad")', {
                    subCursoId: CONFIG.subCursoId
                });

                const cumple = !!resp.ok;
                prerrequisitosEstado.videoCompleto = cumple || !CONFIG.tieneVideo;
                prerrequisitosEstado.pdfVisto = cumple || !CONFIG.tienePDF;

                actualizarBotonEvaluacion(resp.message);
            } catch (error) {
                console.error('Error verificando prerrequisitos:', error);
            }
        }

        function actualizarBotonEvaluacion(serverMsg) {
            const btn = document.getElementById('startEvaluationBtn');
            if (!btn) return;

            const cumple = prerrequisitosEstado.videoCompleto && prerrequisitosEstado.pdfVisto;

            if (cumple) {
                btn.classList.remove('btn-secondary', 'disabled');
                btn.classList.add('btn-warning');
                btn.removeAttribute('disabled');
                btn.style.cursor = 'pointer';
                btn.setAttribute('title', 'Iniciar evaluación');
            } else {
                btn.classList.remove('btn-warning');
                btn.classList.add('btn-secondary', 'disabled');
                btn.setAttribute('disabled', 'disabled');
                btn.style.cursor = 'not-allowed';

                let pendientes = [];
                if (CONFIG.tieneVideo && !prerrequisitosEstado.videoCompleto) {
                    pendientes.push('ver el video (95%)');
                }
                if (CONFIG.tienePDF && !prerrequisitosEstado.pdfVisto) {
                    pendientes.push('abrir el PDF');
                }

                const msg = serverMsg && serverMsg.length
                    ? serverMsg
                    : ('Requisitos pendientes: ' + pendientes.join(' y '));
                btn.setAttribute('title', msg);
            }
        }

        // --- Persistencia monótona ---
        async function registrarProgresoVideo(porcentaje, segundosVistos) {
            if (!CONFIG.tieneVideo) return;

            const currentModelPct = CONFIG.initialProgress;
            const currentModelSecs = CONFIG.initialTimeWatched;

            const pct = Math.min(100, Math.max(0, Math.round(porcentaje)));
            const prevPct = parseInt(localStorage.getItem(LS_KEY) || String(currentModelPct), 10);
            const nextPct = Math.max(prevPct, pct);

            const prevSecs = parseInt(localStorage.getItem(LS_TIME_KEY) || String(currentModelSecs), 10);
            const nextSecs = Math.max(prevSecs, Math.max(0, Math.floor(segundosVistos || 0)));

            if (nextPct <= currentModelPct && nextSecs <= currentModelSecs) return;

            try {
                const resp = await postJson('@Url.Action("RegistrarProgresoVideo", "Universidad")', {
                    subCursoId: CONFIG.subCursoId,
                    porcentaje: nextPct
                });

                if (resp && resp.success) {
                    localStorage.setItem(LS_KEY, String(nextPct));
                    localStorage.setItem(LS_TIME_KEY, String(nextSecs));
                    CONFIG.initialProgress = nextPct;
                    CONFIG.initialTimeWatched = nextSecs;

                    if (nextPct >= 95 && !prerrequisitosEstado.videoCompleto) {
                        prerrequisitosEstado.videoCompleto = true;
                        actualizarBotonEvaluacion();
                    }
                }
            } catch (error) {
                console.error('Error al registrar progreso:', error);
            }
        }

        // --- Inicialización del reproductor (UNA SOLA VEZ) ---
        (function initPlayerAndProgress() {
            const video = document.getElementById('videoPlayer');
            if (!video || video.dataset.bound === '1') return;
            video.dataset.bound = '1';

            const btnPlay = document.getElementById('btnPlay');
            const iconPlay = document.getElementById('iconPlay');
            const btnBack = document.getElementById('btnBack');
            const btnFwd = document.getElementById('btnFwd');
            const timeCurrentEl = document.getElementById('timeCurrent');
            const timeDurationEl = document.getElementById('timeDuration');
            const progressFillEl = document.getElementById('progressFill');
            const timeWatchedEl = document.getElementById('timeWatched') || document.getElementById('displayTimeWatched');

            video.controls = false;

            let lastAllowedTime = Math.max(
                0,
                Math.floor(CONFIG.initialTimeWatched || 0),
                parseInt(localStorage.getItem(LS_TIME_KEY) || '0', 10)
            );

            let accSecs = Math.max(
                CONFIG.initialTimeWatched,
                parseInt(localStorage.getItem(LS_TIME_KEY) || '0', 10)
            );

            let lastBeat = 0;
            let lastPlayingStamp = 0;
            let currentPlayingSecs = 0;

            // === BLOQUEO DE ADELANTAR ===

            // 1) Bloquear cambio de velocidad
            video.addEventListener('ratechange', function() {
                if (video.playbackRate !== 1) {
                    video.playbackRate = 1;
                }
            });

            // 2) Bloquear menú contextual
            video.addEventListener('contextmenu', function(e) {
                e.preventDefault();
            });

            // 3) Bloquear atajos de teclado (flecha derecha, fin, etc.)
            document.addEventListener('keydown', function(e) {
                const isAdvanceKey = ['ArrowRight', 'End', 'PageDown', '.', 'l', 'L'].includes(e.key);
                if (!isAdvanceKey) return;

                const withinPlayer = e.target === video ||
                                   (e.target.closest && e.target.closest('.ns-video')) ||
                                   (e.target.closest && e.target.closest('.ns-controls'));
                if (withinPlayer) {
                    e.preventDefault();
                    e.stopPropagation();
                }
            }, { capture: true });

            // 4) Actualizar tiempo permitido durante reproducción
            video.addEventListener('timeupdate', function() {
                if (!video.seeking && !video.paused) {
                    lastAllowedTime = Math.max(lastAllowedTime, Math.floor(video.currentTime), accSecs || 0);
                }
            }, { passive: true });

            // 5) Impedir seek hacia adelante
            video.addEventListener('seeking', function() {
                const allowed = Math.max(lastAllowedTime, accSecs || 0);
                if (video.currentTime > allowed + 0.25) {
                    video.currentTime = allowed;
                }
            });

            // 6) Deshabilitar botón de adelantar
            if (btnFwd) {
                btnFwd.setAttribute('disabled', 'disabled');
                btnFwd.classList.add('ns-btn-disabled');
                btnFwd.addEventListener('click', function(e) {
                    e.preventDefault();
                });
            }

            // === UTILIDADES ===

            const fmtMS = function(s) {
                const totalSeconds = Math.floor(s);
                const minutes = Math.floor(totalSeconds / 60);
                const seconds = totalSeconds % 60;
                return minutes + ':' + seconds.toString().padStart(2, '0');
            };

            function setIcon(isPlaying) {
                if (!iconPlay) return;

                iconPlay.classList.remove('ns-icon-play', 'ns-icon-pause');
                iconPlay.classList.add(isPlaying ? 'ns-icon-pause' : 'ns-icon-play');

                // ✅ FIX: Verificar que btnPlay existe antes de manipularlo
                if (btnPlay) {
                    if (isPlaying) {
                        btnPlay.classList.remove('ns-btn-primary');
                    } else {
                        btnPlay.classList.add('ns-btn-primary');
                    }
                }
            }

            function uiPush(percentage) {
                const pInt = Math.max(0, Math.min(100, Math.round(percentage)));

                const progressPercentageEl = document.getElementById('progressPercentage');
                if (progressPercentageEl) progressPercentageEl.textContent = pInt;

                const displayProgressEl = document.getElementById('displayProgress');
                if (displayProgressEl) displayProgressEl.textContent = pInt.toFixed(1) + '%';

                const bar = document.getElementById('overallProgressBar');
                if (bar) bar.style.width = pInt + '%';

                if (timeWatchedEl) timeWatchedEl.textContent = fmtMS(accSecs);
            }

            function updateControls() {
                const duration = video.duration || 0;
                if (duration === 0) return;

                const currentTime = video.currentTime;
                const progressPct = (currentTime / duration) * 100;

                if (timeCurrentEl) timeCurrentEl.textContent = fmtMS(currentTime);
                if (progressFillEl) progressFillEl.style.width = progressPct + '%';
            }

            function throttleBeat() {
                const now = performance.now();
                if (now - lastBeat < 2500) return false;
                lastBeat = now;
                return true;
            }

            async function safePlay() {
                try {
                    await video.play();
                } catch (err) {
                    console.error('Error al reproducir:', err);
                }
            }

            function safePause() {
                try {
                    video.pause();
                } catch (e) {
                    console.error('Error al pausar:', e);
                }
            }

            // === EVENT LISTENERS DEL VIDEO ===

            video.addEventListener('play', function() {
                lastPlayingStamp = performance.now();
                currentPlayingSecs = video.currentTime;
                setIcon(true);
            });

            video.addEventListener('pause', function() {
                if (lastPlayingStamp) {
                    if (video.currentTime > currentPlayingSecs) {
                        accSecs = Math.max(accSecs, Math.floor(video.currentTime));
                    }
                    localStorage.setItem(LS_TIME_KEY, String(accSecs));
                    lastPlayingStamp = 0;
                }
                const duration = video.duration || 0;
                const pct = duration ? (accSecs / duration) * 100 : 0;
                registrarProgresoVideo(pct, accSecs);
                uiPush(pct);
                setIcon(false);
            });

            video.addEventListener('timeupdate', function() {
                if (!video.paused && lastPlayingStamp) {
                    accSecs = Math.max(accSecs, Math.floor(video.currentTime));
                }

                const duration = video.duration || 0;
                const pct = duration ? (accSecs / duration) * 100 : 0;

                updateControls();

                if (throttleBeat()) {
                    registrarProgresoVideo(pct, accSecs);
                }

                uiPush(pct);
            });

            video.addEventListener('ended', function() {
                if (lastPlayingStamp) {
                    accSecs = Math.floor(video.duration);
                    localStorage.setItem(LS_TIME_KEY, String(accSecs));
                    lastPlayingStamp = 0;
                }
                registrarProgresoVideo(100, accSecs);
                updateControls();
                uiPush(100);
                setIcon(false);
            });

            video.addEventListener('loadedmetadata', function() {
                const duration = video.duration || 0;

                if (timeDurationEl) timeDurationEl.textContent = fmtMS(duration);

                const cachedTime = Math.min(accSecs, duration);
                if (cachedTime > 0) {
                    video.currentTime = cachedTime;
                }

                const cachedPct = Math.max(CONFIG.initialProgress, duration ? (cachedTime / duration) * 100 : 0);
                uiPush(cachedPct);
                updateControls();
                setIcon(!video.paused);
            });

            // === CONTROLES PERSONALIZADOS ===

            if (btnPlay) {
                btnPlay.addEventListener('click', function(ev) {
                    ev.preventDefault();
                    if (video.paused) {
                        safePlay();
                    } else {
                        safePause();
                    }
                });
            }

            if (btnBack) {
                btnBack.addEventListener('click', function(ev) {
                    ev.preventDefault();
                    video.currentTime = Math.max(0, video.currentTime - 10);
                });
            }

            // Clic en contenedor del video (no en el <video> directamente)
            const nsVideoContainer = document.querySelector('.ns-video');
            if (nsVideoContainer) {
                nsVideoContainer.addEventListener('click', function(ev) {
                    if (ev.target.closest('.ns-controls')) return;
                    if (video.paused) {
                        safePlay();
                    } else {
                        safePause();
                    }
                });
            }
        })();

        // === PDF ===
        async function marcarPdfVisto() {
            if (!CONFIG.tienePDF) return;
            try {
                if (!prerrequisitosEstado.pdfVisto) {
                    await postJson('@Url.Action("MarcarPdfVisto", "Universidad")', {
                        subCursoId: CONFIG.subCursoId
                    });
                    prerrequisitosEstado.pdfVisto = true;
                    await verificarPrerequisitos();
                }
            } catch (error) {
                console.error('Error al marcar PDF visto:', error);
            }
        }

        const btnVerPdf = document.getElementById('btnVerPdf');
        if (btnVerPdf) {
            btnVerPdf.addEventListener('click', marcarPdfVisto);
        }

        // === BOTÓN TOMAR EVALUACIÓN ===
        const btnEvaluacion = document.getElementById('startEvaluationBtn');
        if (btnEvaluacion) {
            btnEvaluacion.addEventListener('click', async function(e) {
                if (this.disabled || this.classList.contains('disabled')) {
                    e.preventDefault();
                    alert(this.getAttribute('title') || 'Debes completar los requisitos antes de la evaluación.');
                    return;
                }

                e.preventDefault();

                try {
                    const resp = await postJson('@Url.Action("PrereqEstado", "Universidad")', {
                        subCursoId: CONFIG.subCursoId
                    });
                    if (resp.ok) {
                        window.location.href = this.getAttribute('href');
                    } else {
                        alert(resp.message || 'Debes completar los requisitos antes de la evaluación.');
                    }
                } catch (error) {
                    console.error('Error al verificar prerrequisitos:', error);
                    alert('No se pudo verificar los requisitos. Inténtalo de nuevo.');
                }
            });
        }

        // === INICIALIZACIÓN ===
        document.addEventListener('DOMContentLoaded', verificarPrerequisitos);
    </script>
}