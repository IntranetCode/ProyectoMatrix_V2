@model ProyectoMatrix.Models.SubCursoDetalle

@{
    ViewData["Title"] = $"{Model.NombreSubCurso} - Universidad NS";
    Layout = "_LayoutUniversidad";

    var usuarioId = ViewBag.UsuarioId ?? 0;
    var empresaId = ViewBag.EmpresaId ?? 0;
}

<div class="subcurso-container">
    <!-- Header de navegación -->
    <div class="subcurso-header">
        <div class="container-fluid">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/Universidad">Universidad NS</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/Universidad/MisCursos">Mis Cursos</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/Universidad/TomarCurso/@Model.CursoID">Curso</a>
                    </li>
                    <li class="breadcrumb-item active">@Model.NombreSubCurso</li>
                </ol>
            </nav>

            <div class="subcurso-title-section">
                <h1 class="subcurso-title">@Model.NombreSubCurso</h1>
                <div class="subcurso-meta">
                    <span class="meta-item">
                        <i class="fas fa-play-circle"></i>
                        Módulo @Model.Orden
                    </span>
                    @if (Model.DuracionVideo.HasValue)
                    {
                        <span class="meta-item">
                            <i class="fas fa-clock"></i>
                            @TimeSpan.FromSeconds(Model.DuracionVideo.Value).ToString(@"mm\:ss")
                        </span>
                    }
                    @if (Model.RequiereEvaluacion)
                    {
                        <span class="meta-item">
                            <i class="fas fa-clipboard-check"></i>
                            Con Evaluación
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Contenido principal -->
    <div class="container-fluid mt-4">
        <div class="row">
            <!-- Sección del video -->
            <div class="col-xl-9">
                <div class="video-section">
                    <!-- Video Player -->
                    @if (!string.IsNullOrEmpty(Model.ArchivoVideo))
                    {
                        <div class="ns-video">
                            <video id="videoPlayer"
                                   preload="metadata"
                                   class="ns-video-el"
                                   data-subcurso-id="@Model.SubCursoID"
                                   data-usuario-id="@usuarioId"
                                   data-empresa-id="@empresaId"
                                   controlslist="nodownload noplaybackrate noremoteplayback"
                                   playsinline
                                   disablepictureinpicture>
                                <source src="~/contenidos/@Model.ArchivoVideo" type="video/mp4">
                                Tu navegador no soporta video HTML5.
                            </video>

                            <!-- Controles personalizados -->
                            <div class="ns-controls">
                                <div class="ns-left">
                                    <button type="button" class="ns-btn ns-btn-primary" id="btnPlay" aria-label="Reproducir/Pausa">
                                        <span class="ns-icon ns-icon-play" id="iconPlay"></span>
                                    </button>
                                    <button type="button" class="ns-btn" id="btnBack" aria-label="Retroceder 10 segundos" title="Retroceder 10s">
                                        <span class="ns-icon ns-icon-back"></span>
                                    </button>
                                    <button type="button" class="ns-btn ns-btn-disabled" id="btnFwd" aria-label="Adelantar deshabilitado"
                                            title="Adelantar deshabilitado" disabled>
                                        <span class="ns-icon ns-icon-fwd"></span>
                                    </button>
                                </div>

                                <div class="ns-right">
                                    <div class="ns-progress" aria-hidden="true">
                                        <div class="ns-progress-bar">
                                            <div class="ns-progress-fill" id="progressFill" style="width:0%"></div>
                                        </div>
                                        <div class="ns-times">
                                            <span id="timeCurrent">0:00</span>
                                            <span id="timeSep">/</span>
                                            <span id="timeDuration">0:00</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Overlay de progreso -->
                            <div class="video-progress-overlay" id="videoProgressOverlay">
                                <div class="progress-info">
                                    <span>Progreso: <span id="progressPercentage">@Model.PorcentajeVisto.ToString("F0")</span>%</span>
                                    <span>Tiempo visto: <span id="timeWatched">@TimeSpan.FromSeconds(Model.TiempoTotalVisto).ToString(@"mm\:ss")</span></span>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="no-video-placeholder">
                            <i class="fas fa-video-slash fa-4x text-muted mb-3"></i>
                            <h5 class="text-muted">No hay video disponible</h5>
                            <p class="text-muted">Este módulo no tiene contenido multimedia.</p>
                        </div>
                    }

                    <!-- Descripción del módulo -->
                    @if (!string.IsNullOrEmpty(Model.Descripcion))
                    {
                        <div class="module-description mt-4">
                            <h5>Descripción del módulo</h5>
                            <p>@Model.Descripcion</p>
                        </div>
                    }

                    <!-- Progreso del usuario -->
                    <div class="progress-summary mt-4">
                        <h5>Tu progreso</h5>
                        <div class="progress-stats">
                            <div class="stat-item">
                                <span class="stat-label">Tiempo visto:</span>
                                <span class="stat-value" id="displayTimeWatched">
                                    @TimeSpan.FromSeconds(Model.TiempoTotalVisto).ToString(@"mm\:ss")
                                </span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Progreso:</span>
                                <span class="stat-value" id="displayProgress">@Model.PorcentajeVisto.ToString("F1")%</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Estado:</span>
                                <span class="badge @(Model.Completado ? "bg-success" : Model.PorcentajeVisto > 0 ? "bg-primary" : "bg-secondary")" id="displayStatus">
                                    @(Model.Completado ? "Completado" : Model.PorcentajeVisto > 0 ? "En Progreso" : "Sin Iniciar")
                                </span>
                            </div>
                        </div>

                        <div class="progress-bar-container mt-3">
                            <div class="progress">
                                <div class="progress-bar bg-primary"
                                     id="overallProgressBar"
                                     style="width: @Model.PorcentajeVisto%"></div>
                            </div>
                            <small class="text-muted mt-1 d-block">
                                Debes ver al menos el 95% del video para completar el módulo
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-xl-3">
                <!-- Navegación -->
                <div class="sidebar-card mb-4">
                    <h6 class="sidebar-card-title">
                        <i class="fas fa-list me-2"></i>Navegación
                    </h6>
                    <div class="navigation-buttons">
                        <a href="/Universidad/TomarCurso/@Model.CursoID"
                           class="btn btn-outline-primary w-100 mb-2">
                            <i class="fas fa-arrow-left me-2"></i>Volver al Curso
                        </a>

                        <button class="btn btn-success w-100"
                                id="completeModuleBtn"
                                style="display: none;">
                            <i class="fas fa-check me-2"></i>Marcar como Completado
                        </button>
                    </div>
                </div>

                <!-- Material adicional -->
                @if (!string.IsNullOrEmpty(Model.ArchivoPDF))
                {
                    <div class="sidebar-card mb-4">
                        <h6 class="sidebar-card-title">
                            <i class="fas fa-file-alt me-2"></i>Material Adicional
                        </h6>
                        <div class="material-item">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-file-pdf text-danger me-3 fa-2x"></i>
                                <div class="flex-grow-1">
                                    <h6 class="mb-1">Documento PDF</h6>
                                    <small class="text-muted">Material complementario</small>
                                </div>
                            </div>
                            <div class="mt-2">
                                <a id="btnVerPdf"
                                   href="~/contenidos/@Model.ArchivoPDF"
                                   target="_blank"
                                   class="btn btn-outline-danger btn-sm me-2">
                                    <i class="fas fa-eye me-1"></i> Ver
                                </a>
                                <a href="~/contenidos/@Model.ArchivoPDF"
                                   download
                                   class="btn btn-outline-primary btn-sm">
                                    <i class="fas fa-download me-1"></i> Descargar
                                </a>
                            </div>
                        </div>
                    </div>
                }

                <!-- Evaluación -->
                @if (Model.RequiereEvaluacion)
                {
                    <div class="sidebar-card mb-4">
                        <h6 class="sidebar-card-title">
                            <i class="fas fa-clipboard-check me-2"></i>Evaluación
                        </h6>

                        @if (Model.UltimoIntento != null)
                        {
                            <div class="evaluation-info mb-3">
                                <div class="alert @(Model.UltimoIntento.Aprobado ? "alert-success" : "alert-warning") py-2">
                                    <small>
                                        <strong>Último intento:</strong><br>
                                        @Model.UltimoIntento.PorcentajeCalificacion.ToString("F1")%
                                        (@(Model.UltimoIntento.Aprobado ? "Aprobado" : "Reprobado"))
                                    </small>
                                </div>
                            </div>
                        }

                        <div class="evaluation-requirements mb-3">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                Puntaje mínimo: @Model.PuntajeMinimo%
                            </small>
                        </div>

                        <!-- Botón para tomar evaluación -->
                        <a class="btn btn-warning w-100" id="startEvaluationBtn"
                           href="/Universidad/TomarEvaluacion/@Model.SubCursoID"
                           data-subcurso-id="@Model.SubCursoID">
                            <i class="fas fa-play-circle me-2"></i>
                            @(Model.UltimoIntento?.Aprobado == true ? "Repetir Evaluación" : "Tomar Evaluación")
                        </a>
                    </div>
                }


                @*
                <!-- Notas personales -->
                <div class="sidebar-card">
                    <h6 class="sidebar-card-title">
                        <i class="fas fa-sticky-note me-2"></i>Mis Notas
                    </h6>
                    <textarea class="form-control"
                              id="moduleNotes"
                              rows="4"
                              placeholder="Escribe tus notas sobre este módulo..."></textarea>
                    <button class="btn btn-outline-primary btn-sm mt-2" id="saveNotesBtn">
                        <i class="fas fa-save me-1"></i>Guardar
                    </button>
                </div> 
                *@

            </div>
        </div>
    </div>
</div>

<!-- Modal de evaluación (si lo usas para futura carga parcial) -->
<div class="modal fade" id="evaluationModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-clipboard-check me-2"></i>
                    Evaluación: @Model.NombreSubCurso
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="evaluationContent">
                <!-- Contenido cargado dinámicamente -->
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary: #004AAD;
        --secondary: #FF6F00;
        --success: #2E7D32;
        --warning: #FFC107;
        --info: #0288D1;
        --danger: #D32F2F;
        --gray-50: #f9fafb;
        --gray-100: #f3f4f6;
        --gray-200: #e5e7eb;
        --gray-600: #4b5563;
        --gray-800: #1f2937;
    }

    .subcurso-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #f8fafc 0%, #eef4ff 100%);
        font-family: 'Segoe UI', Roboto, sans-serif;
    }

    .subcurso-header {
        background: white;
        padding: 2rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        border-bottom: 4px solid var(--primary);
    }

    .subcurso-title {
        color: var(--primary);
        font-weight: 800;
        font-size: 2rem;
        margin-bottom: 1rem;
    }

    .subcurso-meta {
        display: flex;
        gap: 1.5rem;
        flex-wrap: wrap;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--gray-600);
        font-size: 0.9rem;
    }

    .video-section {
        background: white;
        border-radius: 14px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        margin-bottom: 2rem;
    }

    .video-progress-overlay {
        position: absolute;
        top: 12px;
        right: 12px;
        background: rgba(0,0,0,0.7);
        color: #fff;
        padding: 0.4rem 0.9rem;
        border-radius: 8px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .no-video-placeholder {
        text-align: center;
        padding: 5rem 2rem;
        background: var(--gray-50);
        border-radius: 14px;
    }

        .no-video-placeholder i {
            font-size: 3rem;
            color: var(--primary);
            margin-bottom: 1rem;
        }

    .progress-summary {
        padding: 1.5rem;
    }

    .progress-stats {
        display: flex;
        gap: 2rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
    }

    .stat-item {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
        background: var(--gray-50);
        border-radius: 10px;
        padding: 1rem;
        flex: 1;
    }

    .stat-label {
        font-size: 0.8rem;
        color: var(--gray-600);
        font-weight: 500;
    }

    .stat-value {
        font-weight: 700;
        font-size: 1.1rem;
        color: var(--primary);
    }

    .progress-bar-container .progress {
        height: 10px;
        border-radius: 6px;
    }

    .progress-bar-container .progress-bar {
        background-color: var(--secondary);
    }

    .sidebar-card {
        background: white;
        border-radius: 14px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        overflow: hidden;
        margin-bottom: 1.5rem;
    }

    .sidebar-card-title {
        background: var(--gray-50);
        padding: 1rem 1.5rem;
        margin: 0;
        border-bottom: 1px solid var(--gray-200);
        font-weight: 700;
        color: var(--primary);
    }

    .navigation-buttons .btn {
        border-radius: 8px;
        font-weight: 600;
        padding: 0.6rem 1.2rem;
    }

    /* Video + Controles */
    .ns-video {
        position: relative;
        width: 100%;
        background: #000;
        border-radius: 12px;
        overflow: hidden;
    }

    .ns-video-el {
        width: 100%;
        height: auto;
        display: block;
        background: #000;
    }

    .ns-controls {
        position: absolute;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: .75rem;
        padding: .75rem .9rem;
        background: linear-gradient(transparent, rgba(0,0,0,.6));
        color: #fff;
        user-select: none;
    }

    .ns-left, .ns-right {
        display: flex;
        align-items: center;
        gap: .5rem;
    }

    .ns-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 38px;
        height: 38px;
        border-radius: 10px;
        border: 1px solid rgba(255,255,255,.25);
        background: rgba(255,255,255,.08);
        color: #fff;
        transition: .2s ease;
        backdrop-filter: blur(2px);
    }

        .ns-btn:hover {
            background: rgba(255,255,255,.18);
            border-color: rgba(255,255,255,.35);
        }

    .ns-btn-primary {
        width: 44px;
        height: 44px;
        border-color: transparent;
        background: #2563eb;
    }

        .ns-btn-primary:hover {
            background: #1e4ed8;
        }

    .ns-btn-disabled, .ns-btn[disabled] {
        opacity: .45;
        cursor: not-allowed;
        filter: grayscale(20%);
        pointer-events: none;
    }

    .ns-icon {
        width: 0;
        height: 0;
        position: relative;
        display: block;
    }

    .ns-icon-play {
        border-left: 10px solid #fff;
        border-top: 6px solid transparent;
        border-bottom: 6px solid transparent;
    }

    .ns-icon-pause {
        width: 12px;
        height: 12px;
        box-sizing: content-box;
    }

        .ns-icon-pause::before, .ns-icon-pause::after {
            content: "";
            position: absolute;
            top: 0;
            width: 4px;
            height: 12px;
            background: #fff;
            border-radius: 1px;
        }

        .ns-icon-pause::before {
            left: 0;
        }

        .ns-icon-pause::after {
            right: 0;
        }

    .ns-progress {
        display: flex;
        align-items: center;
        gap: .6rem;
        min-width: 220px;
    }

    .ns-progress-bar {
        position: relative;
        width: 360px;
        max-width: 48vw;
        height: 6px;
        border-radius: 999px;
        background: rgba(255,255,255,.25);
        overflow: hidden;
        pointer-events: none;
    }

    .ns-progress-fill {
        height: 100%;
        width: 0%;
        background: #22c55e;
        transition: width .15s linear;
    }

    .ns-times {
        font: 500 13px/1.2 system-ui, -apple-system, Segoe UI, Roboto, Arial;
        opacity: .95;
    }

    #timeSep {
        opacity: .7;
        margin: 0 .25rem;
    }

    @@media (max-width: 768px) {
        .subcurso-title {
            font-size: 1.6rem;
        }

        .progress-stats {
            flex-direction: column;
            gap: 1rem;
        }

        .meta-item {
            font-size: 0.8rem;
        }
    }
</style>

@section Scripts {
    @Html.AntiForgeryToken()
    <script>
        // ===== Utilidades =====
        function getCsrf() {
          const el = document.querySelector('input[name="__RequestVerificationToken"]');
          return el ? el.value : '';
        }
        async function postJson(url, payload) {
          const headers = { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' };
          const token = getCsrf();
          if (token) headers['RequestVerificationToken'] = token;     // si el endpoint valida CSRF
          const r = await fetch(url, { method: 'POST', headers, credentials: 'same-origin', body: JSON.stringify(payload) });
          if (!r.ok) {
            const t = await r.text(); console.error('POST', url, r.status, t);
            throw new Error('HTTP ' + r.status);
          }
          return r.json();
        }

        // ===== Estado inicial =====
        const videoConfig = {
          subCursoId: @Model.SubCursoID,
          usuarioId: @usuarioId,
          empresaId: @empresaId,
          progresoPrevio: Number(@Model.PorcentajeVisto) || 0,
          tiempoVistoPrevio: Number(@Model.TiempoTotalVisto) || 0,
          requiereEvaluacion: @Model.RequiereEvaluacion.ToString().ToLower(),
          completado: @Model.Completado.ToString().ToLower()
        };

        // ===== PDF: marcar como visto =====
        (function(){
          const linkPdf = document.getElementById('btnVerPdf');
          if (!linkPdf) return;
          linkPdf.addEventListener('click', async () => {
            try {
              await postJson('@Url.Action("MarcarPdfVisto", "Universidad")', { subCursoId: videoConfig.subCursoId });
            } catch { /* no bloquear UX */ }
          });
        })();

        // ===== Video: progreso + anti-adelantar =====
        (function(){
          const v = document.getElementById('videoPlayer');
          if (!v) return;

          v.setAttribute('controlsList','nodownload noplaybackrate noremoteplayback');
          v.disablePictureInPicture = true;

          let lastAllowed = videoConfig.tiempoVistoPrevio || 0;
          const EPS = 0.35;
          let ultimoEnviado = 0, ultimoTs = 0;

          v.addEventListener('loadedmetadata', () => {
            if (lastAllowed > 0 && lastAllowed < (v.duration || Infinity)) {
              v.currentTime = lastAllowed;
            }
            if (v.playbackRate !== 1) v.playbackRate = 1;
            document.getElementById('timeDuration').textContent = fmt(v.duration || 0);
          });

          v.addEventListener('ratechange', () => { if (v.playbackRate !== 1) v.playbackRate = 1; });

          function clampIfForward(){
            if (v.currentTime > lastAllowed + EPS) { v.currentTime = lastAllowed; }
          }
          v.addEventListener('seeking', () => {
            clampIfForward();
            const until = performance.now() + 700;
            (function guard(){
              clampIfForward();
              if (performance.now() < until) requestAnimationFrame(guard);
            })();
          });
          v.addEventListener('seeked', clampIfForward);

          v.addEventListener('timeupdate', async () => {
            if (v.currentTime > lastAllowed) lastAllowed = v.currentTime;

            const dur = v.duration || 0;
            const cur = v.currentTime || 0;
            const pct = dur ? (cur / dur) * 100 : 0;
            const now = Date.now();

            updateProgressDisplay(pct, Math.floor(cur));

            if (pct - ultimoEnviado >= 5 || (now - ultimoTs) > 5000) {
              ultimoEnviado = pct; ultimoTs = now;
              await enviarPct(pct);
            }
          });

          v.addEventListener('ended', async () => enviarPct(100));

          async function enviarPct(pct){
            try {
              await postJson('@Url.Action("RegistrarProgresoVideo", "Universidad")', {
                subCursoId: videoConfig.subCursoId,
                porcentaje: Math.round(pct)
              });
            } catch { /* silencioso */ }
          }

          // UI play/pause/back y tiempos
          const btnPlay = document.getElementById('btnPlay');
          const iconPlay = document.getElementById('iconPlay');
          const btnBack = document.getElementById('btnBack');
          const fill = document.getElementById('progressFill');
          const tCur = document.getElementById('timeCurrent');
          const tDur = document.getElementById('timeDuration');

          btnPlay?.addEventListener('click', async () => { if (v.paused) { try { await v.play(); } catch {} } else { v.pause(); }});
          v.addEventListener('play',  () => swapIcon('pause'));
          v.addEventListener('pause', () => swapIcon('play'));
          btnBack?.addEventListener('click', () => { v.currentTime = Math.max(0, v.currentTime - 10); });

          function swapIcon(state){
            if (state === 'pause') { iconPlay.classList.remove('ns-icon-play'); iconPlay.classList.add('ns-icon-pause'); }
            else { iconPlay.classList.remove('ns-icon-pause'); iconPlay.classList.add('ns-icon-play'); }
          }
          function fmt(s){ s=Math.max(0,Math.floor(s)); const m=Math.floor(s/60), sec=s%60; return `${m}:${String(sec).padStart(2,'0')}`; }
          function updateProgressDisplay(progress, curSec){
            const dur = v.duration || 0;
            document.getElementById('progressPercentage').textContent = Math.round(progress);
            document.getElementById('displayProgress').textContent = progress.toFixed(1) + '%';
            const timeString = fmt(curSec);
            document.getElementById('timeWatched').textContent = timeString;
            document.getElementById('displayTimeWatched').textContent = timeString;
            document.getElementById('overallProgressBar').style.width = progress + '%';
            if (progress >= 95) {
              const b = document.getElementById('displayStatus');
              b.className = 'badge bg-success'; b.textContent = 'Completado';
              document.getElementById('completeModuleBtn').style.display = 'block';
            } else if (progress > 0) {
              const b = document.getElementById('displayStatus');
              b.className = 'badge bg-primary'; b.textContent = 'En Progreso';
            }
            fill.style.width = (dur ? (curSec / dur) * 100 : 0) + '%';
            tCur.textContent = fmt(curSec);
            if (dur) tDur.textContent = fmt(dur);
          }
        })();

        // ===== Botón evaluación: verificar prerrequisitos =====
        (function(){
          const btn = document.getElementById('startEvaluationBtn');
          if (!btn) return;
          btn.addEventListener('click', async function(ev){
            ev.preventDefault();
            const subCursoId = parseInt(btn.dataset.subcursoId, 10);
            try {
              const resp = await postJson('@Url.Action("PrereqEstado", "Universidad")', { subCursoId });
              if (resp.ok) {
                window.location = `/Universidad/TomarEvaluacion/${subCursoId}`;
              } else {
                alert(resp.message || 'Primero completa el contenido requerido (video y/o PDF).');
              }
            } catch {
              alert('No se pudo verificar los requisitos. Inténtalo de nuevo.');
            }
          });
        })();

        // ===== Notas locales =====
        (function(){
          const saveBtn = document.getElementById('saveNotesBtn');
          if (!saveBtn) return;
          const key = 'notes_' + @Model.SubCursoID;
          const txt = document.getElementById('moduleNotes');
          txt.value = localStorage.getItem(key) || '';
          saveBtn.addEventListener('click', () => {
            localStorage.setItem(key, txt.value || '');
            const original = saveBtn.innerHTML;
            saveBtn.innerHTML = '<i class="fas fa-check me-1"></i>Guardado';
            saveBtn.classList.add('btn-success');
            setTimeout(()=>{ saveBtn.innerHTML = original; saveBtn.classList.remove('btn-success'); }, 1500);
          });
        })();
    </script>
}
