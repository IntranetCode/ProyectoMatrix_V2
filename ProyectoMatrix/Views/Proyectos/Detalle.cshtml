@using ProyectoMatrix.Models
@using ProyectoMatrix.Servicios

@using ProyectoMatrix.Models.ViewModels
@model ProyectoDetalleVm
@{
    ViewData["Title"] = "Detalle del Proyecto";
    var rol = Context.Session.GetString("Rol") ?? "Colaborador";
    Layout = rol == "Administrador" ? "~/Views/Shared/_Layout.cshtml" : "~/Views/Shared/_Colaborador.cshtml";
}
<link href="~/css/stylesProyectosDetalle.css" rel="stylesheet" />
@*Mandar a llamar al servicio de acceso para ocultar o mostrar los botones correspondientes *@
@inject IServicioAcceso Acceso
@{
    var usuarioId = int.Parse(User.FindFirst("UsuarioID").Value);
    var puedeCrear = await Acceso.TienePermisoAsync(usuarioId, "Crear Proyectos", "Crear");
    var puedeEditar = await Acceso.TienePermisoAsync(usuarioId, "Editar proyecto", "Editar");
    var puedeEliminar = await Acceso.TienePermisoAsync(usuarioId, "Eliminar Proyectos", "Eliminar");
}



<div class="container-fluid">
    <!-- Header del Proyecto -->
    <div class="proyecto-header">
        <div class="d-flex justify-content-between align-items-start">
            <div class="flex-grow-1">
                <div class="d-flex align-items-center mb-2">
                    <h1 class="h2 mb-0 me-3">@Model.Proyecto.NombreProyecto</h1>
                    <span class="badge estado-badge-large bg-@Model.Proyecto.Estado.ObtenerColorEstado()">
                        <i class="@Model.Proyecto.Estado.ObtenerIconoEstado() me-1"></i>
                        @Model.Proyecto.Estado.ObtenerNombreEstado()
                    </span>
                </div>

                @if (!string.IsNullOrEmpty(Model.Proyecto.CodigoProyecto))
                {
                    <p class="mb-2"><strong>Código:</strong> @Model.Proyecto.CodigoProyecto</p>
                }

                @if (!string.IsNullOrEmpty(Model.Proyecto.Descripcion))
                {
                    <p class="mb-0 text-white-75">@Model.Proyecto.Descripcion</p>
                }
            </div>

            <div class="action-buttons">
                @if (puedeEditar)
                {
                    <a href="@Url.Action("Editar", new { id = Model.Proyecto.ProyectoID })" class="btn btn-light me-2">
                        <i class="fas fa-edit me-1"></i>Editar
                    </a>
                }
                <a href="@Url.Action("Index")" class="btn btn-outline-light">
                    <i class="fas fa-arrow-left me-1"></i>Volver
                </a>
            </div>
        </div>

        <!-- Información rápida -->
        <div class="row mt-3">
            <div class="col-auto">
                <small class="text-white-75">Creado por:</small>
                <strong class="d-block">@(Model.Proyecto.CreadoPor ?? "Sin especificar")</strong>
            </div>
            <div class="col-auto">
                <small class="text-white-75">Fecha de creación:</small>
                <strong class="d-block">@Model.Proyecto.FechaCreacion.ToString("dd/MM/yyyy")</strong>
            </div>
            @if (!string.IsNullOrEmpty(Model.Proyecto.ResponsableProyecto))
            {
                <div class="col-auto">
                    <small class="text-white-75">Responsable:</small>
                    <strong class="d-block">@Model.Proyecto.ResponsableProyecto</strong>
                </div>
            }
            @if (puedeCrear)
            {
                <div class="col-auto">
                    <small class="text-white-75">Visualizaciones:</small>
                    <strong class="d-block"><i class="fas fa-eye me-1"></i>@Model.Proyecto.Visualizaciones</strong>
            </div>
            }
        </div>

    </div>

    <div class="row">
        <!-- Columna Principal -->
        <div class="col-12 col-lg-8">
            <!-- Progreso del Proyecto -->
            <div class="info-card">
                <h6><i class="fas fa-chart-line me-2"></i>Progreso del Proyecto</h6>
                <div class="row align-items-center">
                    <div class="col-md-4">
                        <div class="progreso-circular">
                            <svg viewBox="0 0 42 42">
                                <circle class="progreso-bg" cx="21" cy="21" r="15.915"></circle>
                                <circle class="progreso-fill" cx="21" cy="21" r="15.915"
                                        stroke="@(Model.Proyecto.Progreso == 100 ? "#28a745" : Model.Proyecto.Progreso >= 75 ? "#17a2b8" : Model.Proyecto.Progreso >= 50 ? "#ffc107" : "#dc3545")"
                                        stroke-dasharray="@(Model.Proyecto.Progreso), 100"
                                        stroke-dashoffset="0"></circle>
                            </svg>
                            <div class="progreso-text text-@(Model.Proyecto.Progreso == 100 ? "success" : Model.Proyecto.Progreso >= 75 ? "info" : Model.Proyecto.Progreso >= 50 ? "warning" : "danger")">
                                @Model.Proyecto.Progreso%
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="d-flex align-items-center mb-2">
                            <span class="prioridad-indicator bg-@Model.Proyecto.Prioridad.ObtenerColorPrioridad()"></span>
                            <strong>Prioridad: @Model.Proyecto.Prioridad.ObtenerNombrePrioridad()</strong>
                        </div>

                        @if (Model.Proyecto.Presupuesto.HasValue)
                        {
                            <p class="mb-2">
                                <i class="fas fa-dollar-sign me-1 text-muted"></i>
                                <strong>Presupuesto:</strong> $@Model.Proyecto.Presupuesto.Value.ToString("N2")
                            </p>
                        }

                        <!-- Controles de progreso -->
                        <div class="mt-3">

                            @if (puedeCrear)
                            {
                                <label class="form-label">Actualizar Progreso:</label>
                            }

                            <div class="input-group">

                                <input type="range" class="form-range me-2" min="0" max="100"
                                       value="@Model.Proyecto.Progreso" id="progresoSlider"
                                       oninput="updateProgressDisplay(this.value)" />

                                <span class="input-group-text" id="progresoValue">@Model.Proyecto.Progreso%</span>
                                @if (puedeEditar)
                                {
                                    <button type="button" class="btn btn-primary"
                                            onclick="actualizarProgreso(@Model.Proyecto.ProyectoID)">
                                        Actualizar
                                    </button>
                                }
                               
                            </div>
                        </div>

                        <!-- Control de estado -->

                        
                            <div class="mt-3">
                                <label class="form-label">Cambiar Estado:</label>
                                <div class="input-group">
                                    <select class="form-select" id="nuevoEstado">
                                        @foreach (EstadoProyecto estado in Enum.GetValues<EstadoProyecto>())
                                        {
                                        <option value="@((int)estado)" selected="@(Model.Proyecto.Estado == estado)">
                                                @estado.ObtenerNombreEstado()
                                            </option>
                                        }
                                    </select>
                               @if (puedeEditar)
                                {
                                    <button type="button" class="btn btn-outline-primary"
                                            onclick="cambiarEstado(@Model.Proyecto.ProyectoID)">
                                        Cambiar
                                    </button>
                                }
                            </div>
                            </div>
                       
                      

                    </div>
                </div>
            </div>

           
           

            <!-- Gestor de Archivos -->

            <div class="info-card" id="gestor-archivos"
                 data-proyecto="@Model.Proyecto.ProyectoID"
                 data-puede-crear="@puedeCrear.ToString().ToLower()"
                 data-puede-editar="@puedeEditar.ToString().ToLower()"
                 data-puede-eliminar="@puedeEliminar.ToString().ToLower()">

                <h6><i class="fas fa-folder-open me-2"></i>Gestor de Archivos</h6>

                <!-- Anti-CSRF para AJAX -->
                <form id="ga-antiforgery">@Html.AntiForgeryToken()</form>

                <!-- Breadcrumb -->
                <nav aria-label="breadcrumb" class="mb-3">
                    <ol class="breadcrumb mb-0" id="ga-breadcrumb"></ol>
                </nav>

                <!-- Toolbar -->

                <div class="d-flex flex-wrap gap-2 mb-3">
                    @if (puedeCrear)
                    {
                        <div class="btn-group">
                            <button type="button" class="btn btn-primary" id="ga-subir-btn">
                                <i class="fas fa-upload me-1"></i> Subir archivos
                            </button>
                            <input type="file" id="ga-file-input" multiple hidden />
                        </div>
                        <button type="button" class="btn btn-outline-primary" id="ga-nueva-carpeta-btn">
                            <i class="fas fa-folder-plus me-1"></i> Nueva carpeta
                        </button>
                    }
                    <button type="button" class="btn btn-outline-secondary" id="ga-recargar-btn">
                        <i class="fas fa-rotate-right me-1"></i>
                    </button>
                </div>

                <!-- Tabla -->
                <div class="table-responsive">
                    <table class="table align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th style="width:36px;"></th>
                                <th>Nombre</th>
                                <th style="width:140px;">Tamaño</th>
                                <th style="width:160px;">Modificado</th>
                                <th style="width:200px;">Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="ga-lista"></tbody>
                    </table>
                </div>

                <!-- Progreso -->
                <div class="progress mt-3 d-none" id="ga-progress-wrap" style="height:10px;">
                    <div class="progress-bar" id="ga-progress" role="progressbar" style="width:0;"></div>
                </div>
            </div>



            <!-- Tags -->
            @if (!string.IsNullOrEmpty(Model.Proyecto.Tags))
            {
                <div class="info-card">
                    <h6><i class="fas fa-tags me-2"></i>Etiquetas</h6>
                    <div>
                        @foreach (var tag in Model.Proyecto.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                        {
                            <span class="badge bg-light text-dark me-1 mb-1">#@tag.Trim()</span>
                        }
                    </div>
                </div>
            }


        </div>



        <!-- Columna Lateral -->
        <div class="col-12 col-lg-4">

            


            <!-- Fechas del Proyecto -->
            <div class="info-card">
                <h6><i class="fas fa-calendar-alt me-2"></i>Timeline del Proyecto</h6>
                <div class="timeline">
                    <div class="timeline-item completed">
                        <strong>Proyecto Creado</strong>
                        <div class="text-muted">@Model.Proyecto.FechaCreacion.ToString("dd/MM/yyyy HH:mm")</div>
                        <small class="text-muted">por @(Model.Proyecto.CreadoPor ?? "Sistema")</small>
                    </div>

                    @if (Model.Proyecto.FechaInicio.HasValue)
                    {
                        <div class="timeline-item @(Model.Proyecto.FechaInicio <= DateTime.Now ? "completed" : "")">
                            <strong>Fecha de Inicio</strong>
                            <div class="text-muted">@Model.Proyecto.FechaInicio.Value.ToString("dd/MM/yyyy")</div>
                        </div>
                    }

                    @if (Model.Proyecto.FechaFinPrevista.HasValue)
                    {
                        <div class="timeline-item @(Model.Proyecto.Estado == EstadoProyecto.Completado ? "completed" : "")">
                            <strong>Entrega Prevista</strong>
                            <div class="text-muted @(Model.Proyecto.FechaFinPrevista < DateTime.Now && Model.Proyecto.Estado != EstadoProyecto.Completado ? "text-danger" : "")">
                                @Model.Proyecto.FechaFinPrevista.Value.ToString("dd/MM/yyyy")
                                @if (Model.Proyecto.FechaFinPrevista < DateTime.Now && Model.Proyecto.Estado != EstadoProyecto.Completado)
                                {
                                    <span class="badge bg-danger ms-2">Atrasado</span>
                                }
                            </div>
                        </div>
                    }

                    @if (Model.Proyecto.FechaFinReal.HasValue)
                    {
                        <div class="timeline-item completed">
                            <strong>Proyecto Completado</strong>
                            <div class="text-success">@Model.Proyecto.FechaFinReal.Value.ToString("dd/MM/yyyy HH:mm")</div>
                        </div>
                    }
                </div>
            </div>

            <!-- Observaciones -->
            @if (!string.IsNullOrEmpty(Model.Proyecto.Observaciones))
            {
                <div class="info-card">
                    <h6><i class="fas fa-sticky-note me-2"></i>Observaciones</h6>
                    <div class="bg-light p-3 rounded">
                        @Model.Proyecto.Observaciones
                    </div>
                </div>
            }


            <!-- Información Adicional -->
            <div class="info-card">
                <h6><i class="fas fa-info-circle me-2"></i>Información del Sistema</h6>
                <div class="small">
                    <div class="d-flex justify-content-between mb-2">
                        <span>ID del Proyecto:</span>
                        <strong>@Model.Proyecto.ProyectoID</strong>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Empresa:</span>
                        <strong>ID @Model.Proyecto.EmpresaID</strong>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Estado:</span>
                        <span class="badge bg-@Model.Proyecto.Estado.ObtenerColorEstado()">
                            @Model.Proyecto.Estado.ObtenerNombreEstado()
                        </span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Activo:</span>
                        <span class="badge bg-@(Model.Proyecto.EsActivo ? "success" : "danger")">
                            @(Model.Proyecto.EsActivo ? "Sí" : "No")
                        </span>
                    </div>
                </div>
            </div>

           @*En este apartado se debe de agregar el historial de fechas y posiblemente un Gantt
               y en editar el agregar , editar , eliminar una nueva fecha
               o se puede desde esta misma vista
           *@
           <div class="info-card">
               <h6><i class="fas fa-calendar-alt me-2"></i>Gestión de actividades</h6>
               <div class="small">

               </div>
           </div>



        </div>
    </div>
</div>


            
            <!-- Modal de vista previa (único) -->
            <div class="modal fade" id="ga-preview" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-xl modal-dialog-scrollable">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="ga-preview-title">Vista previa</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                        </div>
                        <div class="modal-body p-0" id="ga-preview-body"></div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                        </div>
                    </div>
                </div>
            </div>
@section Scripts {
                <script>
                    (function(){
                      // --- Alertas flotantes ---
                      function showAlert(message, type) {
                        const html = `
                          <div class="alert alert-${type} alert-dismissible fade show position-fixed"
                               style="top:16px;right:16px;z-index:1040" role="alert">
                            ${message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                          </div>`;
                        document.body.insertAdjacentHTML('beforeend', html);
                        setTimeout(() => {
                          const el = document.querySelector('.alert.position-fixed');
                          if (el) el.remove();
                        }, 5000);
                      }

                      // --- Cargar Bootstrap si no está ---
                                          const modalEl = document.getElementById('ga-preview');
                    if (modalEl && modalEl.parentElement !== document.body) {
                      document.body.appendChild(modalEl); // mover modal directamente bajo <body>
                    }

                      function ensureBootstrap(){
                        return new Promise(resolve=>{
                          if (window.bootstrap && bootstrap.Modal) return resolve();
                          const s=document.createElement('script');
                          s.src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js";
                          s.onload=resolve; document.head.appendChild(s);
                        });
                      }

                      ensureBootstrap().then(() => {
                        const wrap = document.getElementById('gestor-archivos');
                        if(!wrap) return;

                        // === Estado/elementos ===
                        const proyectoId   = parseInt(wrap.dataset.proyecto,10);
                        const canCrear     = wrap.dataset.puedeCrear   === 'true';
                        const canEditar    = wrap.dataset.puedeEditar  === 'true';
                        const canEliminar  = wrap.dataset.puedeEliminar=== 'true';
                        let ruta = "";

                        const elLista    = document.getElementById('ga-lista');
                        const elBread    = document.getElementById('ga-breadcrumb');
                        const elFile     = document.getElementById('ga-file-input');
                        const elSubir    = document.getElementById('ga-subir-btn');
                        const elNueva    = document.getElementById('ga-nueva-carpeta-btn');
                        const elRecargar = document.getElementById('ga-recargar-btn');
                        const progressWrap = document.getElementById('ga-progress-wrap');
                        const progressBar  = document.getElementById('ga-progress');

                        const token = document.querySelector('#ga-antiforgery [name="__RequestVerificationToken"]')?.value || '';

                        // === Helpers ===
                        function humanSize(bytes){
                          const b = Number(bytes);
                          if(!Number.isFinite(b) || b <= 0) return '—';
                          const u = ['B','KB','MB','GB','TB'];
                          let i=0, n=b;
                          while(n >= 1024 && i < u.length-1){ n/=1024; i++; }
                          return (n >= 10 ? Math.round(n) : n.toFixed(1)) + ' ' + u[i];
                        }
                        function fechaLocal(isoStr){
                          if(!isoStr) return '—';
                          const d = new Date(isoStr);
                          return isNaN(d) ? '—' : d.toLocaleString();
                        }
                        function pintarBreadcrumb(crumbs){
                          elBread.innerHTML = '';
                          (crumbs||[]).forEach((c,idx)=>{
                            const li = document.createElement('li');
                            li.className = 'breadcrumb-item' + (idx===crumbs.length-1?' active':'');
                            if(idx===crumbs.length-1){ li.textContent = c.nombre; }
                            else{
                              const a = document.createElement('a');
                              a.href='#'; a.textContent=c.nombre;
                              a.addEventListener('click', e => { e.preventDefault(); ruta = c.ruta || ""; listar(); });
                              li.appendChild(a);
                            }
                            elBread.appendChild(li);
                          });
                        }
                        function puedePrever(nombre){
                          const n = (nombre||'').toLowerCase();
                          return n.endsWith('.png')||n.endsWith('.jpg')||n.endsWith('.jpeg')||n.endsWith('.gif')||n.endsWith('.webp')||
                                 n.endsWith('.pdf')||
                                 n.endsWith('.mp4')||n.endsWith('.webm')||n.endsWith('.ogg')||
                                 n.endsWith('.mp3')||n.endsWith('.wav')||n.endsWith('.oga')||
                                 n.endsWith('.txt')||n.endsWith('.log')||n.endsWith('.csv')||n.endsWith('.json')||n.endsWith('.xml')||
                                 n.endsWith('.doc')||n.endsWith('.docx')||n.endsWith('.xls')||n.endsWith('.xlsx')||n.endsWith('.ppt')||n.endsWith('.pptx')||
                                 n.endsWith('.dwg')||n.endsWith('.dxf')||n.endsWith('.step')||n.endsWith('.stp')||n.endsWith('.iges')||n.endsWith('.igs');
                        }
                        function urlDescargar(r){
                          return '@Url.Action("DescargarArchivo", "Proyectos")' + `?id=${proyectoId}&rutaRelativa=${encodeURIComponent(r)}`;
                        }
                        function makePreviewUrl(r){
                          return '@Url.Action("VerArchivo", "Proyectos")' + `?id=${proyectoId}&rutaRelativa=${encodeURIComponent(r)}`;
                        }
                        function extDe(nombre){
                          const i=(nombre||'').lastIndexOf('.'); return i>=0 ? nombre.slice(i).toLowerCase() : '';
                        }

                        // Modal ÚNICO
                        const modalEl  = document.getElementById('ga-preview');
                        const bodyEl   = document.getElementById('ga-preview-body');
                        const titleEl  = document.getElementById('ga-preview-title');
                        const bsPreview = modalEl ? bootstrap.Modal.getOrCreateInstance(modalEl, { backdrop:true, keyboard:true, focus:true }) : null;

                        modalEl?.addEventListener('hidden.bs.modal', ()=> {
                          if (bodyEl) bodyEl.innerHTML = '';
                          
                        });

                        // Vista previa
                        function openPreview(rutaRelativa, nombre){
                          if (!bodyEl) return;
                          // quita alertas que puedan tapar la X
                          document.querySelectorAll('.alert.position-fixed').forEach(a => a.remove());

                          titleEl.textContent = nombre || 'Vista previa';
                          const url = makePreviewUrl(rutaRelativa);
                          const ext = extDe(nombre || rutaRelativa);

                          bodyEl.innerHTML = '';

                          if (['.png','.jpg','.jpeg','.gif','.webp','.bmp','.svg'].includes(ext)) {
                            bodyEl.innerHTML = `<div class="p-3"><img src="${url}" class="img-fluid" /></div>`;
                          }
                          else if (ext === '.pdf') {
                            bodyEl.innerHTML = `<iframe src="${url}#toolbar=1" style="width:100%;height:80vh;border:0;"></iframe>`;
                          }
                          else if (['.mp4','.webm','.ogg'].includes(ext)) {
                            bodyEl.innerHTML = `<video controls style="width:100%;max-height:80vh;"><source src="${url}">Tu navegador no soporta video HTML5.</video>`;
                          }
                          else if (['.mp3','.wav','.oga','.ogg'].includes(ext)) {
                            bodyEl.innerHTML = `<div class="p-3"><audio controls style="width:100%;"><source src="${url}">Tu navegador no soporta audio HTML5.</audio></div>`;
                          }
                          else if (['.txt','.log','.csv','.json','.xml'].includes(ext)) {
                            bodyEl.innerHTML = `<iframe src="${url}" style="width:100%;height:80vh;border:0;"></iframe>`;
                          }
                          else if (['.doc','.docx','.xls','.xlsx','.ppt','.pptx'].includes(ext)) {
                            const absUrl = new URL(url, window.location.origin).toString();
                            const office = `https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(absUrl)}`;
                            bodyEl.innerHTML = `
                              <div class="alert alert-info m-3">Intentando abrir con Office Online. Si no carga, descárgalo.</div>
                              <iframe src="${office}" style="width:100%;height:75vh;border:0;"></iframe>`;
                          }
                          else if (['.dwg','.dxf','.step','.stp','.iges','.igs'].includes(ext)) {
                            bodyEl.innerHTML = `
                              <div class="p-3">
                                <div class="alert alert-warning">
                                  CAD no se previsualiza nativamente.
                                  <ul class="mb-0">
                                    <li>Integrar Autodesk Forge Viewer</li>
                                    <li>Convertir a PDF/imagen</li>
                                    <li>Descargar y abrir en tu app CAD</li>
                                  </ul>
                                </div>
                                <a class="btn btn-sm btn-primary" href="${urlDescargar(rutaRelativa)}"><i class="fas fa-download me-1"></i> Descargar</a>
                              </div>`;
                          }
                          else {
                            bodyEl.innerHTML = `
                              <div class="p-3">
                                <div class="alert alert-secondary">Tipo no soportado para vista previa.</div>
                                <a class="btn btn-sm btn-primary" href="${urlDescargar(rutaRelativa)}"><i class="fas fa-download me-1"></i> Descargar</a>
                              </div>`;
                          }

                          bsPreview?.show();
                        }

                        // aPI POST JSON
                        async function postJson(url, payload){
                          const res = await fetch(url, {
                            method:'POST',
                            headers:{ 'Content-Type':'application/json', 'RequestVerificationToken': token },
                            body: JSON.stringify(payload)
                          });
                          try { const data = await res.json(); return !!data.ok; }
                          catch { return false; }
                        }

                        // Listado / acciones 
                        async function listar(){
                          const res = await fetch('@Url.Action("ListarArchivos", "Proyectos")', {
                            method:'POST',
                            headers:{ 'Content-Type':'application/json', 'RequestVerificationToken': token },
                            body: JSON.stringify({ ProyectoId: proyectoId, Ruta: ruta })
                          });
                          const data = await res.json();
                          if(!data.ok){ showAlert('Error al listar','danger'); return; }

                          pintarBreadcrumb(data.breadcrumb);
                          const items = data.items || [];
                          elLista.innerHTML = '';

                          if(ruta && ruta !== ''){
                            const tr = document.createElement('tr');
                            tr.innerHTML = `
                              <td><i class="fas fa-level-up-alt"></i></td>
                              <td colspan="4"><a href="#" id="ga-up">Subir un nivel</a></td>`;
                            elLista.appendChild(tr);
                            tr.querySelector('#ga-up').addEventListener('click', (e)=>{
                              e.preventDefault();
                              const parts = ruta.split('/'); parts.pop();
                              ruta = parts.join('/') || '';
                              listar();
                            });
                          }

                          items.forEach(it=>{
                            const tr = document.createElement('tr');

                            // Acciones según tipo y permisos
                            let acciones = '';
                            if (it.esCarpeta) {
                              if (canEliminar) acciones += `
                                <button type="button" class="btn btn-sm btn-outline-danger ga-del" data-r="${it.rutaRelativa}">
                                  <i class="fas fa-trash"></i>
                                </button>`;
                            } else {
                              acciones += `
                                <a class="btn btn-sm btn-outline-primary" href="${urlDescargar(it.rutaRelativa)}">
                                  <i class="fas fa-download"></i>
                                </a>`;
                              if (canEliminar) acciones += `
                                <button type="button" class="btn btn-sm btn-outline-danger ga-del" data-r="${it.rutaRelativa}">
                                  <i class="fas fa-trash"></i>
                                </button>`;
                              if (puedePrever(it.nombre)) acciones += `
                                <button type="button" class="btn btn-sm btn-outline-success ga-view" data-r="${it.rutaRelativa}" data-n="${it.nombre}">
                                  <i class="fas fa-eye"></i>
                                </button>`;
                            }

                            tr.innerHTML = `
                              <td><i class="${it.iconoCss}"></i></td>
                              <td class="text-truncate" style="max-width:360px;">
                                ${it.esCarpeta
                                  ? `<a href="#" class="ga-open" data-r="${it.rutaRelativa}">${it.nombre}</a>`
                                  : `<span>${it.nombre}</span>`}
                              </td>
                              <td>${it.esCarpeta ? '—' : humanSize(it.tamanoBytes)}</td>
                              <td>${fechaLocal(it.ultimaMod)}</td>
                              <td class="d-flex flex-wrap gap-2">${acciones}</td>`;

                            elLista.appendChild(tr);

                            tr.querySelectorAll('.ga-open').forEach(a=>{
                              a.addEventListener('click', e => { e.preventDefault(); ruta = a.dataset.r; listar(); });
                            });
                            tr.querySelectorAll('.ga-del').forEach(btn=>{
                              btn.addEventListener('click', async ()=>{
                                const rutaRel = btn.dataset.r;
                                if(!confirm('¿Eliminar? Esta acción no se puede deshacer.')) return;
                                const ok = await postJson('@Url.Action("EliminarArchivo", "Proyectos")',{ ProyectoId: proyectoId, RutaRelativa: rutaRel });
                                showAlert(ok ? 'Eliminado' : 'No se pudo eliminar', ok ? 'success' : 'danger');
                                if(ok) listar();
                              });
                            });
                            tr.querySelectorAll('.ga-view').forEach(btn=>{
                              btn.addEventListener('click', ()=> openPreview(btn.dataset.r, btn.dataset.n));
                            });
                          });
                        }

                        //  Subir archivos 
                        elSubir?.addEventListener('click', ()=> elFile.click());
                        elFile?.addEventListener('change', async ()=>{
                          if(!elFile.files || elFile.files.length===0) return;
                          const fd = new FormData();
                          for(const f of elFile.files) fd.append('files', f);
                          fd.append('proyectoId', proyectoId);
                          fd.append('rutaDestino', ruta);

                          progressWrap.classList.remove('d-none');
                          progressBar.style.width = '0%';

                          await new Promise((resolve)=>{
                            const xhr = new XMLHttpRequest();
                            xhr.open('POST','@Url.Action("SubirArchivos", "Proyectos")', true);
                            xhr.setRequestHeader('RequestVerificationToken', token);
                            xhr.upload.onprogress = (e)=>{
                              if(e.lengthComputable){
                                progressBar.style.width = Math.round((e.loaded/e.total)*100) + '%';
                              }
                            };
                            xhr.onreadystatechange = ()=>{ if(xhr.readyState===4) resolve(); };
                            xhr.send(fd);
                          });

                          setTimeout(()=>{ progressWrap.classList.add('d-none'); progressBar.style.width='0%'; }, 400);
                          elFile.value = '';
                          showAlert('Subida finalizada','success');
                          listar();
                        });

                        // Nueva carpeta / Recargar
                        elNueva?.addEventListener('click', async ()=>{
                          const nombre = prompt('Nombre de la nueva carpeta:');
                          if(!nombre) return;
                          const ok = await postJson('@Url.Action("CrearCarpeta", "Proyectos")', { ProyectoId: proyectoId, RutaPadre: ruta, Nombre: nombre });
                          showAlert(ok ? 'Carpeta creada' : 'No se pudo crear', ok ? 'success' : 'danger');
                          if(ok) listar();
                        });
                        elRecargar?.addEventListener('click', listar);

                        // === Arranque ===
                        listar();
                      });
                    })();
                </script>
}
