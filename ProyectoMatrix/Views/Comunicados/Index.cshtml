@model IEnumerable<ProyectoMatrix.Models.ComunicadoListItemVM>
@{
    Layout = "_LayoutComunicados";
    ViewData["Title"] = "Comunicados";
    var esGestor = User.IsInRole("Autor/Editor de Contenido")
                   || User.IsInRole("Administrador de Intranet")
                   || User.IsInRole("Propietario de Contenido");
}

<link href="~/css/stylesComunicadosIndex.css" rel="stylesheet" />

@* //He agregado el helper de categorias  *@

@functions {
    (string Icono, string Clase) GetEstiloCategoria(string cat) => cat switch
    {
        "Urgente" => ("⚠️", "badge badge-urgente"),  //He agregado el helper de categorias
        "Evento" => ("🎉", "badge badge-evento"),
        _ => ("📢", "badge badge-general")
    };
} 
<div class="container py-4">
 
    

        @if (esGestor)
        {
        <p class="text-muted mb-4">Elige una opción:</p>

        <div class="comunicados-container">
            <div class="button-container">
                <a class="btn btn-info" href="/Comunicados/Lista">🔔 Ver todos los comunicados</a>
                <a class="btn btn-success" href="/Comunicados/Crear">➕ Crear comunicado</a>
                <a class="btn btn-warning" href="/Comunicados/Gestionar">⚙️ Gestionar</a>
            </div>
        </div>


        <h2 class="mb-3">Comunicados</h2>




        <div class="comunicados-grid" id="comGrid">
            @foreach (var c in Model.Take(3))
            {
                //EN este article se va a recuperar el ID para marccar como leido y fuincione correctamente con el scrip
                <article class="com-card" data-id="@c.ComunicadoID" tabindex="0">
                    @if (!string.IsNullOrEmpty(c.Imagen))
                    {
                        var ext = System.IO.Path.GetExtension(c.Imagen).ToLower();

                        if (ext == ".mp4")
                        {
                            <video class="com-media" controls playsinline preload="metadata">
                                <source src="@c.Imagen" type="video/mp4" />
                                Tu navegador no soporta el elemento de video.
                            </video>
                        }
                        else if (ext == ".jpg" || ext == ".jpeg" || ext == ".png" || ext == ".gif")
                        {
                            <img class="com-media" src="@c.Imagen" alt="Imagen comunicado" />
                        }
                        else if (ext == ".pdf")
                        {
                            <div class="com-media-pdf">
                                <a href="@c.Imagen" target="_blank" class="com-pdf-link" aria-label="Abrir PDF del comunicado">
                                    <img src="~/Imagenes/pdf.png" alt="Icono PDF" />
                                </a>
                            </div>
                        }
                    }

                    <div class="com-card-body">
                        <h3 class="com-title">@c.NombreComunicado</h3>

                        @{
                            var estilo = GetEstiloCategoria(c.Categoria);
                        }
                        <span class="@estilo.Clase">@estilo.Icono @c.Categoria</span>



                        <p class="com-desc">@c.Descripcion</p>
                        <div class="com-meta">@c.FechaCreacion.ToString("dd/MM/yyyy")</div>
                    </div>
                </article>
            }
        </div>

     
        }
        else
        {




        <h2 class="mb-3">Comunicados</h2>


        //Se agrego este fragmento de codigo solo para la vista de usuarios finales , podrnn ver 
        //los comunicados leidos y no leidos
        <div class="cont-sidebar">
            <a href="@Url.Action("Index", new { estado = "NoLeidos" })" class="cont-card pendientes">
                <div class="cont-card-body">
                    <div class="cont-card-icon">📩</div>
                    <div class="cont-card-title">Pendientes</div>
                    <div class="cont-card-num">@ViewBag.NoLeidos</div>
                </div>
            </a>
            <a href="@Url.Action("Index", new { estado = "Leidos" })" class="cont-card leidos">
                <div class="cont-card-body">
                    <div class="cont-card-icon">✅</div>
                    <div class="cont-card-title">Leídos</div>
                    <div class="cont-card-num">@ViewBag.Leidos</div>
                </div>
            </a>
        </div>
        <div class="comunicados-grid" id="comGrid">
            @foreach (var c in Model)
            {
                //EN este article se va a recuperar el ID para marccar como leido y fuincione correctamente con el scrip
                <article class="com-card" data-id="@c.ComunicadoID" tabindex="0">
                    @if (!string.IsNullOrEmpty(c.Imagen))
                    {
                        var ext = System.IO.Path.GetExtension(c.Imagen).ToLower();

                        if (ext == ".mp4")
                        {
                            <video class="com-media" controls playsinline preload="metadata">
                                <source src="@c.Imagen" type="video/mp4" />
                                Tu navegador no soporta el elemento de video.
                            </video>
                        }
                        else if (ext == ".jpg" || ext == ".jpeg" || ext == ".png" || ext == ".gif")
                        {
                            <img class="com-media" src="@c.Imagen" alt="Imagen comunicado" />
                        }
                        else if (ext == ".pdf")
                        {
                            <div class="com-media-pdf">
                                <a href="@c.Imagen" target="_blank" class="com-pdf-link" aria-label="Abrir PDF del comunicado">
                                    <img src="~/Imagenes/pdf.png" alt="Icono PDF" />
                                </a>
                            </div>
                        }
                    }

                    <div class="com-card-body">
                        <h3 class="com-title">@c.NombreComunicado</h3>

                        @{
                            var estilo = GetEstiloCategoria(c.Categoria);
                        }
                        <span class="@estilo.Clase">@estilo.Icono @c.Categoria</span>


                        <p class="com-desc">@c.Descripcion</p>
                        <div class="com-meta">@c.FechaCreacion.ToString("dd/MM/yyyy")</div>
                    </div>
                </article>
            }



        </div>

        @if (ViewBag.EsHome == true)
        {
            <div class="text-center mt-3">
                <a asp-controller="Comunicados" asp-action="Lista" class="btn btn-primary">
                    Ver comunicados anteriores
                </a>
            </div>
        }

        <div id="comModalBackdrop" class="com-modal-backdrop" aria-hidden="true">
            <div id="comModal" class="com-modal" role="dialog" aria-modal="true" aria-labelledby="comModalTitle">

                <div class="com-modal-header">
                    <h5 id="comModalTitle" class="com-modal-title">Detalle del Comunicado</h5>
                    <button type="button" class="com-modal-close" aria-label="Cerrar" title="Cerrar"> &times;</button>
                </div>
                <img id="comModalImg" class="com-modal-img" src="" alt="Imagen Comunicado" style="display:none;" />
                <video id="comModalVideo" class="com-modal-video" controls style="display:none;" width="100%">
                    <source id="comModalVideoSrc" src="" type="video/mp4" />
                    Tu navegador no soporta el elemento de video.
                </video>
                <iframe id="comModalPdf" class="com-modal-pdf" style="display:none;" width="100%" height="500px"></iframe>
                <div class="com-modal-body">
                    <div id="comModalMeta" class="com-modal-name"></div>
                    <div id="comModalDesc" class="com-modal-description"></div>
                    <div id="comModalDirigido" class="com-modal-dirigido"></div>

                </div>
            </div>
        </div>
        }
    </div>
    
@section Scripts {
    <script>
               (function () {
            const cards = document.querySelectorAll('.com-card');
            const modal = document.getElementById('comModal');
            const backdrop = document.getElementById('comModalBackdrop');

            const img = document.getElementById('comModalImg');
            const video = document.getElementById('comModalVideo');
            const videoSrc = document.getElementById('comModalVideoSrc');
            const pdf = document.getElementById('comModalPdf');

            const title = document.getElementById('comModalTitle');
            const meta = document.getElementById('comModalMeta');
            const desc = document.getElementById('comModalDesc');
            const dirigido = document.getElementById('comModalDirigido');

            const btnClose = document.querySelector('.com-modal-close');

            function openFromCard(card) {
                const t = card.querySelector('.com-title')?.textContent?.trim() || '';
                const m = card.querySelector('.com-meta')?.textContent?.trim() || '';
                const d = card.querySelector('.com-desc')?.textContent?.trim() || '';
                const chip = card.querySelector('.com-chip')?.textContent?.trim() || '';
                const mediaElement = card.querySelector('.com-media') || card.querySelector('.com-media-pdf');

        let mediaSrc = '';
            if (mediaElement) {
            if (mediaElement.tagName.toLowerCase() === 'img') {
                mediaSrc = mediaElement.getAttribute('src') || '';
            } else if (mediaElement.tagName.toLowerCase() === 'video') {
                const source = mediaElement.querySelector('source');
                mediaSrc = source ? source.getAttribute('src') : '';
            } else if (mediaElement.classList.contains('com-media-pdf')) {
                const a = mediaElement.querySelector('a');
                if (a) {
                    mediaSrc = a.getAttribute('href') || '';
                }
            }
        }


                title.textContent = t;
                meta.textContent = m;
                desc.textContent = d;

                if (chip) {
                    dirigido.innerHTML = 'Dirigido a : <span class="com-chip">' + chip + '</span>';
                } else {
                    dirigido.textContent = '';
                }

                const ext = mediaSrc.split('.').pop().toLowerCase();

                if (['mp4', 'webm', 'ogg'].includes(ext)) {
                    videoSrc.src = mediaSrc;
                    video.load();
                    video.style.display = '';
                    img.style.display = 'none';
                    img.src = '';
                    pdf.style.display = 'none';
                    pdf.src = '';
                } else if (['jpg', 'jpeg', 'png', 'gif'].includes(ext)) {
                    img.src = mediaSrc;
                    img.style.display = '';
                    video.style.display = 'none';
                    videoSrc.src = '';
                    video.load();
                    pdf.style.display = 'none';
                    pdf.src = '';
                } else if (ext === 'pdf') {
                    pdf.style.display = '';
                    pdf.src = mediaSrc;

                    video.style.display = 'none';
                    videoSrc.src = '';
                    video.load();

                    img.style.display = 'none';
                    img.src = '';
                } else {
                    img.style.display = 'none';
                    img.src = '';
                    video.style.display = 'none';
                    videoSrc.src = '';
                    video.load();
                    pdf.style.display = 'none';
                    pdf.src = '';
                }

                backdrop.classList.add('show');
                requestAnimationFrame(() => modal.classList.add('show'));
                document.body.style.overflow = 'hidden';
            }

            function closeModal() {
                modal.classList.remove('show');
                backdrop.classList.remove('show');
                document.body.style.overflow = '';
                pdf.style.display = 'none';
                pdf.src = '';
            }

            cards.forEach(card => {
                card.addEventListener('click', () => openFromCard(card));
                card.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        openFromCard(card);
                    }
                });
            });

            btnClose.addEventListener('click', closeModal);
            backdrop.addEventListener('click', (e) => {
                if (e.target === backdrop) {
                    closeModal();
                }
            });

            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && backdrop.classList.contains('show')) {
                    closeModal();
                }
            });

        })();

    </script>

    @*sE agrega un scrip para marcar como leidos los comunicados que se encuyentran en index*@
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".com-card").forEach(card => {
                const id = card.getAttribute("data-id");
                if(id){
                    fetch("@Url.Action("MarcarLeido", "Comunicados")", {
                        method: "POST",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: "id=" + encodeURIComponent(id)
                    });
                }
            });
        });
    </script>
    @*Este scrip se agrego para que al momento que el usuario de clic sobre los comunicados pendientes*@
    @if ((string?)ViewBag.Estado == "NoLeidos")
    {
        <script>
            document.addEventListener("DOMContentLoaded", () => {
              const cards = document.querySelectorAll(".com-card[data-id]");
              const seen = new Set();

              const mark = (id) => {
                if (seen.has(id)) return;
                seen.add(id);
                fetch("@Url.Action("MarcarLeido","Comunicados")", {
                  method: "POST",
                  headers: { "Content-Type": "application/x-www-form-urlencoded" },
                  body: "id=" + encodeURIComponent(id)
                });
              };

              const timers = new Map();
              const io = new IntersectionObserver((entries) => {
                entries.forEach(e => {
                  const card = e.target;
                  const id = card.getAttribute("data-id");
                  if (!id) return;

                  if (e.isIntersecting) {
                   @*visible: espera 2.5s antes de marcar leído*@
                    const t = setTimeout(() => mark(id), 2500);
                    timers.set(card, t);
                  } else {
                    // salió de vista: cancela si no se marcó
                    const t = timers.get(card);
                    if (t) { clearTimeout(t); timers.delete(card); }
                  }
                });
              }, { root: null, threshold: 0.5 });

              cards.forEach(c => io.observe(c));
            });
        </script>
        }
}